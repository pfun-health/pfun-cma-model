# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.bounded_param_descriptions import BoundedParamDescriptions
from openapi_client.models.bounded_param_keys import BoundedParamKeys
from openapi_client.models.cma_model_params_bounds import CMAModelParamsBounds
from openapi_client.models.lb import Lb
from openapi_client.models.midbound import Midbound
from openapi_client.models.seed import Seed
from openapi_client.models.tm import Tm
from openapi_client.models.ub import Ub
from typing import Optional, Set
from typing_extensions import Self

class CMAModelParams(BaseModel):
    """
    Represents the parameters for a CMA model.  Args:     t (Optional[array_like], optional): Time vector (decimal hours). Defaults to None.     N (int, optional): Number of time points. Defaults to 24.     d (float, optional): Time zone offset (hours). Defaults to 0.0.     taup (float, optional): Circadian-relative photoperiod length. Defaults to 1.0.     taug (float, optional): Glucose response time constant. Defaults to 1.0.     B (float, optional): Glucose Bias constant. Defaults to 0.05.     Cm (float, optional): Cortisol temporal sensitivity coefficient. Defaults to 0.0.     toff (float, optional): Solar noon offset (latitude). Defaults to 0.0.     tM (Tuple[float, float, float], optional): Meal times (hours). Defaults to (7.0, 11.0, 17.5).     seed (Optional[int], optional): Random seed. Defaults to None.     eps (float, optional): Random noise scale (\"epsilon\"). Defaults to 1e-18.
    """ # noqa: E501
    t: Optional[Union[StrictFloat, StrictInt]] = None
    n: Optional[StrictInt] = Field(default=None, alias="N")
    d: Optional[Union[StrictFloat, StrictInt]] = 0.0
    taup: Optional[Union[StrictFloat, StrictInt]] = 1.0
    taug: Optional[Union[StrictFloat, StrictInt]] = None
    b: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.05, alias="B")
    cm: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.0, alias="Cm")
    toff: Optional[Union[StrictFloat, StrictInt]] = 0.0
    t_m: Optional[Tm] = Field(default=None, alias="tM")
    seed: Optional[Seed] = None
    eps: Optional[Union[StrictFloat, StrictInt]] = None
    lb: Optional[Lb] = None
    ub: Optional[Ub] = None
    bounded_param_keys: Optional[BoundedParamKeys] = None
    midbound: Optional[Midbound] = None
    bounded_param_descriptions: Optional[BoundedParamDescriptions] = None
    bounds: Optional[CMAModelParamsBounds] = None
    __properties: ClassVar[List[str]] = ["t", "N", "d", "taup", "taug", "B", "Cm", "toff", "tM", "seed", "eps", "lb", "ub", "bounded_param_keys", "midbound", "bounded_param_descriptions", "bounds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CMAModelParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of t_m
        if self.t_m:
            _dict['tM'] = self.t_m.to_dict()
        # override the default output from pydantic by calling `to_dict()` of seed
        if self.seed:
            _dict['seed'] = self.seed.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lb
        if self.lb:
            _dict['lb'] = self.lb.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ub
        if self.ub:
            _dict['ub'] = self.ub.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bounded_param_keys
        if self.bounded_param_keys:
            _dict['bounded_param_keys'] = self.bounded_param_keys.to_dict()
        # override the default output from pydantic by calling `to_dict()` of midbound
        if self.midbound:
            _dict['midbound'] = self.midbound.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bounded_param_descriptions
        if self.bounded_param_descriptions:
            _dict['bounded_param_descriptions'] = self.bounded_param_descriptions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bounds
        if self.bounds:
            _dict['bounds'] = self.bounds.to_dict()
        # set to None if t (nullable) is None
        # and model_fields_set contains the field
        if self.t is None and "t" in self.model_fields_set:
            _dict['t'] = None

        # set to None if n (nullable) is None
        # and model_fields_set contains the field
        if self.n is None and "n" in self.model_fields_set:
            _dict['N'] = None

        # set to None if taug (nullable) is None
        # and model_fields_set contains the field
        if self.taug is None and "taug" in self.model_fields_set:
            _dict['taug'] = None

        # set to None if seed (nullable) is None
        # and model_fields_set contains the field
        if self.seed is None and "seed" in self.model_fields_set:
            _dict['seed'] = None

        # set to None if eps (nullable) is None
        # and model_fields_set contains the field
        if self.eps is None and "eps" in self.model_fields_set:
            _dict['eps'] = None

        # set to None if lb (nullable) is None
        # and model_fields_set contains the field
        if self.lb is None and "lb" in self.model_fields_set:
            _dict['lb'] = None

        # set to None if ub (nullable) is None
        # and model_fields_set contains the field
        if self.ub is None and "ub" in self.model_fields_set:
            _dict['ub'] = None

        # set to None if bounded_param_keys (nullable) is None
        # and model_fields_set contains the field
        if self.bounded_param_keys is None and "bounded_param_keys" in self.model_fields_set:
            _dict['bounded_param_keys'] = None

        # set to None if midbound (nullable) is None
        # and model_fields_set contains the field
        if self.midbound is None and "midbound" in self.model_fields_set:
            _dict['midbound'] = None

        # set to None if bounded_param_descriptions (nullable) is None
        # and model_fields_set contains the field
        if self.bounded_param_descriptions is None and "bounded_param_descriptions" in self.model_fields_set:
            _dict['bounded_param_descriptions'] = None

        # set to None if bounds (nullable) is None
        # and model_fields_set contains the field
        if self.bounds is None and "bounds" in self.model_fields_set:
            _dict['bounds'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CMAModelParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "t": obj.get("t"),
            "N": obj.get("N"),
            "d": obj.get("d") if obj.get("d") is not None else 0.0,
            "taup": obj.get("taup") if obj.get("taup") is not None else 1.0,
            "taug": obj.get("taug"),
            "B": obj.get("B") if obj.get("B") is not None else 0.05,
            "Cm": obj.get("Cm") if obj.get("Cm") is not None else 0.0,
            "toff": obj.get("toff") if obj.get("toff") is not None else 0.0,
            "tM": Tm.from_dict(obj["tM"]) if obj.get("tM") is not None else None,
            "seed": Seed.from_dict(obj["seed"]) if obj.get("seed") is not None else None,
            "eps": obj.get("eps"),
            "lb": Lb.from_dict(obj["lb"]) if obj.get("lb") is not None else None,
            "ub": Ub.from_dict(obj["ub"]) if obj.get("ub") is not None else None,
            "bounded_param_keys": BoundedParamKeys.from_dict(obj["bounded_param_keys"]) if obj.get("bounded_param_keys") is not None else None,
            "midbound": Midbound.from_dict(obj["midbound"]) if obj.get("midbound") is not None else None,
            "bounded_param_descriptions": BoundedParamDescriptions.from_dict(obj["bounded_param_descriptions"]) if obj.get("bounded_param_descriptions") is not None else None,
            "bounds": CMAModelParamsBounds.from_dict(obj["bounds"]) if obj.get("bounds") is not None else None
        })
        return _obj


