# coding: utf-8

"""
    Dexcom Developer API

    This API provides access to Dexcom continuous glucose monitoring data for authorized users.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetEventsV3200ResponseInner(BaseModel):
    """
    GetEventsV3200ResponseInner
    """ # noqa: E501
    event_id: Optional[StrictStr] = Field(default=None, alias="eventId")
    event_type: Optional[StrictStr] = Field(default=None, alias="eventType")
    system_time: Optional[datetime] = Field(default=None, alias="systemTime")
    display_time: Optional[datetime] = Field(default=None, alias="displayTime")
    value: Optional[Any] = None
    unit: Optional[Any] = None
    transmitter_id: Optional[Any] = Field(default=None, alias="transmitterId")
    transmitter_generation: Optional[Any] = Field(default=None, alias="transmitterGeneration")
    display_device: Optional[Any] = Field(default=None, alias="displayDevice")
    __properties: ClassVar[List[str]] = ["eventId", "eventType", "systemTime", "displayTime", "value", "unit", "transmitterId", "transmitterGeneration", "displayDevice"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetEventsV3200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if value (nullable) is None
        # and model_fields_set contains the field
        if self.value is None and "value" in self.model_fields_set:
            _dict['value'] = None

        # set to None if unit (nullable) is None
        # and model_fields_set contains the field
        if self.unit is None and "unit" in self.model_fields_set:
            _dict['unit'] = None

        # set to None if transmitter_id (nullable) is None
        # and model_fields_set contains the field
        if self.transmitter_id is None and "transmitter_id" in self.model_fields_set:
            _dict['transmitterId'] = None

        # set to None if transmitter_generation (nullable) is None
        # and model_fields_set contains the field
        if self.transmitter_generation is None and "transmitter_generation" in self.model_fields_set:
            _dict['transmitterGeneration'] = None

        # set to None if display_device (nullable) is None
        # and model_fields_set contains the field
        if self.display_device is None and "display_device" in self.model_fields_set:
            _dict['displayDevice'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetEventsV3200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eventId": obj.get("eventId"),
            "eventType": obj.get("eventType"),
            "systemTime": obj.get("systemTime"),
            "displayTime": obj.get("displayTime"),
            "value": obj.get("value"),
            "unit": obj.get("unit"),
            "transmitterId": obj.get("transmitterId"),
            "transmitterGeneration": obj.get("transmitterGeneration"),
            "displayDevice": obj.get("displayDevice")
        })
        return _obj


