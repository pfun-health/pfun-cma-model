# coding: utf-8

"""
    Dexcom Developer API

    This API provides access to Dexcom continuous glucose monitoring data for authorized users.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class EGVRecord(BaseModel):
    """
    EGVRecord
    """ # noqa: E501
    record_id: Optional[StrictStr] = Field(default=None, alias="recordId")
    system_time: Optional[datetime] = Field(default=None, alias="systemTime")
    display_time: Optional[datetime] = Field(default=None, alias="displayTime")
    transmitter_id: Optional[StrictStr] = Field(default=None, alias="transmitterId")
    transmitter_ticks: Optional[StrictInt] = Field(default=None, alias="transmitterTicks")
    value: Optional[StrictInt] = None
    status: Optional[StrictStr] = None
    trend: Optional[StrictStr] = None
    trend_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="trendRate")
    unit: Optional[StrictStr] = None
    rate_unit: Optional[StrictStr] = Field(default=None, alias="rateUnit")
    display_device: Optional[StrictStr] = Field(default=None, alias="displayDevice")
    transmitter_generation: Optional[StrictStr] = Field(default=None, alias="transmitterGeneration")
    __properties: ClassVar[List[str]] = ["recordId", "systemTime", "displayTime", "transmitterId", "transmitterTicks", "value", "status", "trend", "trendRate", "unit", "rateUnit", "displayDevice", "transmitterGeneration"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('unknown', 'high', 'low', 'ok',):
            raise ValueError("must be one of enum values ('unknown', 'high', 'low', 'ok')")
        return value

    @field_validator('trend')
    def trend_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('none', 'unknown', 'doubleUp', 'singleUp', 'fortyFiveUp', 'flat', 'fortyFiveDown', 'singleDown', 'doubleDown', 'notComputable', 'rateOutOfRange',):
            raise ValueError("must be one of enum values ('none', 'unknown', 'doubleUp', 'singleUp', 'fortyFiveUp', 'flat', 'fortyFiveDown', 'singleDown', 'doubleDown', 'notComputable', 'rateOutOfRange')")
        return value

    @field_validator('unit')
    def unit_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('unknown', 'mg/dL', 'mmol/L',):
            raise ValueError("must be one of enum values ('unknown', 'mg/dL', 'mmol/L')")
        return value

    @field_validator('rate_unit')
    def rate_unit_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('unknown', 'mg/dL/min', 'mmol/L/min',):
            raise ValueError("must be one of enum values ('unknown', 'mg/dL/min', 'mmol/L/min')")
        return value

    @field_validator('transmitter_generation')
    def transmitter_generation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('unknown', 'g4', 'g5', 'g6', 'g6+', 'dexcomPro', 'g7',):
            raise ValueError("must be one of enum values ('unknown', 'g4', 'g5', 'g6', 'g6+', 'dexcomPro', 'g7')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of EGVRecord from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of EGVRecord from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "recordId": obj.get("recordId"),
            "systemTime": obj.get("systemTime"),
            "displayTime": obj.get("displayTime"),
            "transmitterId": obj.get("transmitterId"),
            "transmitterTicks": obj.get("transmitterTicks"),
            "value": obj.get("value"),
            "status": obj.get("status"),
            "trend": obj.get("trend"),
            "trendRate": obj.get("trendRate"),
            "unit": obj.get("unit"),
            "rateUnit": obj.get("rateUnit"),
            "displayDevice": obj.get("displayDevice"),
            "transmitterGeneration": obj.get("transmitterGeneration")
        })
        return _obj


