{% extends "login_dexcom.html.jinja2" %}
<head>
    {% block head %}
        {{ super() }}
    {% endblock head %}
</head>
<body>
    {% block body %}
        <ion-app>
        <div>
            <ion-alert id="username-prompt"></ion-alert>
            <ion-nav root="login-dexcom"></ion-nav>
            <ion-picker id="username-picker"></ion-picker>
            <ion-grid>
            <ion-row class="ion-align-items-center ion-justify-content-center container-fluid">
            <ion-col></ion-col>
            <ion-col class="center-block justify-content-center d-flex">
            <ion-spinner color="primary" style="display: none;"></ion-spinner>
            </ion-col>
            <ion-col></ion-col>
            </ion-row>
            </ion-grid>
        </div>
        </ion-app>
        <div id="loc-holder" hidden></div>
        <script src="/static/js/geoinfo.js"></script>
        <script src="/static/js/login_dexcom.js"></script>
        <script>
            // check login creds from cookies initially
            var loggedin;
            var token;
            var local_ts = localStorage.getItem('local_ts');
            (async () => {
                setTimeout(() => {console.log('timeout'); }, 100);
                if(null == localStorage.getItem('local_ts')) {
                    await getTimezoneOffset(); // local timestamp
                }
                local_ts = localStorage.getItem('local_ts');
                loggedin = await checkLoggedIn();
                try {
                    token = (await getDexcomOAuthToken()).access_token;
                } catch (e) {
                    alert(`Whoops! Looks like your credentials are out of date...
                    
                    To continue, please sign out, then sign in again.

                    *For Demo users*:
                    If this issue persists, please report the bug to: "robbie@pfun.me" with subject line: "test.pfun.app: bug report".

                    Thanks!`);
                    console.warn('not authorized (dexcom)');
                    localStorage.clear();
                    window.location.href = "/#login";
                }
            })();
            
            const query_dexcom_endpoint = '/api/v1/dexcom/query?user=self&endpoint=egvs&startDate={{ startDate }}&endDate={{ endDate }}';
            
            async function query_new_results() {
                loggedin = await checkLoggedIn();
                token = (await getDexcomOAuthToken()).access_token;
                var raw_data;
                if(loggedin && token) {
                    console.log("authenticated");
                    const ts_str = localStorage.getItem("local_ts");
                    console.log('ts_str:', ts_str);
                    console.log("querying dexcom...");
                    $("ion-spinner").show();
                    raw_data = await fetch(query_dexcom_endpoint, {
                        method: 'GET',
                        headers: {
                            Authorization: `Bearer ${token}`,
                        },
                        json: true,
                    })
                    .catch((err) => { console.error(err); $("ion-spinner").hide(); alert(err); })
                    .then(async (resp) => {
                        const data = await resp.json();
                        if(!data.data.errors) {
                            console.log('queried dexcom successfully.');
                        } else {
                            console.error("failed to query dexcom");
                            console.table(data);
                        }
                        return data;
                    });
                    
                    var data;
                    if(raw_data){
                        console.table(raw_data);
                        local_ts = await JSON.parse(localStorage.getItem("local_ts"));
                        if(local_ts == null) {
                            // handle failed local timestamp calc
                            console.warn("failed to get local timestamp");
                            local_ts = await getTimezoneOffset();
                        }

                        // include local timezone offset in seconds
                        raw_data.data.tz_offset = local_ts.tz_offset;
                        console.table(raw_data);

                        console.log("storing dexcom data...");
                        await fetch("/store-dexcom", {
                            method: "POST",
                                headers: {
                                    "Content-Type": "application/json",
                                },
                                body: JSON.stringify(raw_data),
                            })
                            .catch((err) => { console.error("error saving data:", err); $("ion-spinner").hide(); alert(err); })
                            .then((resp) => { console.log("saved data:", resp); });

                        console.log("fitting model...");
                        data = await fetch('/fit-model', {
                            method: "GET",
                            headers: {
                                "Content-Accepted": "application/json",
                            },
                            json: true,
                        })
                        .catch((err) => { console.error(err); $("ion-spinner").hide(); alert(err); })
                        .then(async (resp) => {
                                const jdata = await resp.json();
                                console.log("received fit-model data.");
                                return jdata;
                            });

                        if(data) {
                            console.table(data.soln);
                            console.log(data);
                            console.log("getting recommendations...");
                            const x = await fetch("/recommendations/summary?raw=1").then((resp) => { return resp.json(); });
                            return x;
                        }
                    }
                }
                $("ion-spinner").hide();
                alert("Something went wrong... Please try again, thanks!");
                return {
                    "error": "failed to get recommendations!"
                };
            }

            function signin () {
                console.log("launching signin...")
                (async () => { await launchDexcomAuth(); })();
                return true;
            }

            class LoginDexcom extends HTMLElement {

                async checkExistingUsers() {
                    var picker = $("#username-picker")[0];
                    if (!picker) {
                        picker = document.createElement("ion-picker");
                        picker.id = "username-picker";
                        document.body.append(picker);
                    }
                    picker.header = `Choose from this list of saved users, or <span class="fw-bold">[new user]</span> to add a new login.`;
                    picker.columns = [
                        {
                            name: "nickname",
                            options: [{text: "[new user]", value: ""}]
                        }
                    ];
                    picker.buttons = [
                        {
                            text: 'Cancel',
                            role: 'cancel'
                        },
                        {
                            text: 'Choose',
                            handler: (value) => {
                                console.log("selected username:", value.nickname.value);
                                localStorage.setItem("username", value.nickname.value);
                                const username = value.nickname.value;
                                db.map((key, dval) => {
                                    if(dval.username == username) {
                                        console.log("got matching email:", dval.email);
                                        localStorage.setItem("email", dval.email);
                                    }
                                });
                            }
                        }
                    ];
                    var anyNames = false;
                    await db.map(async (key, value) => {
                        anyNames = true;
                        console.log(`existing nickname: ${value.username}...`);
                        await picker.columns[0].options.push({text: value.username, value: value.username});
                    }, async () => {
                        console.log('anynames=',anyNames);
                        if(anyNames) {
                            await picker.present();
                            picker.addEventListener("willDismiss", (evt) => {
                                launchDexcomAuth();
                            });
                        }
                    });
                    
                }
                async connectedCallback() {
                    // check logged in
                    const loggedin = await checkLoggedIn();
                    if(!localStorage.getItem("username")||!localStorage.getItem("email")||!loggedin){
                        await this.checkExistingUsers();
                    }
                    const logout_path = `/logout`;
                    const title = loggedin ? `Welcome back, ${localStorage.getItem("username")}!` : `Please sign in to get started...`;
                    const buttons = loggedin ? `<ion-button id="signout-button" href="${logout_path}">Sign Out.</ion-button>` :
                        `<ion-button id="signin-button" onclick="(async () => { await launchDexcomAuth(); })()">Sign-In/Register.</ion-button>`;
                    const content = loggedin ? 
                        `<ion-nav-link router-direction="forward" component="view-results" href="#/view-results">
                            <ion-button>View your results...</ion-button>
                        </ion-nav-link>` :
                        `Please sign in with your Dexcom login to view results.`;
                    this.innerHTML = `
                    <ion-header>
                        <ion-toolbar>
                            <ion-title>${title}</ion-title>
                        </ion-toolbar>
                        <ion-toolbar>
                            ${buttons}
                        </ion-toolbar>
                    </ion-header>
                    <ion-content class="ion-padding">
                        ${content}
                    </ion-content>
                    
                    `;
                }
            }

            function makeSummaryItem(use) {
                return `
                    <ion-accordion value="${use.kind}-${use.name}">
                        <ion-item color="${use.color}" slot="header">
                            <ion-label>${use.title}</ion-label>
                        </ion-item>
                        <div slot="content" class="ion-padding">
                            <ion-label>Goal:</ion-label>
                            <p>${use.goal_short}</p>
                            <ion-label>Tips:</ion-label>
                            <p>${use.rec_short}</p>
                        </div>
                    </ion-accordion>
                `;
            }
            
            class SummaryResult {
                constructor(raw) {
                    this.obj = raw;
                    this.raw = raw.summary;
                    this.raw_stats = raw.stats;
                    this.img = raw.summary.visual_plan;
                }
                get weaknesses() {
                    return JSON.parse(this.raw.weaknesses);
                }
                get strengths() {
                    return JSON.parse(this.raw.strengths);
                }
                get summary() {
                    var items = ["weakness", "strength"];
                    var mapped = [];
                    items = items.map((value) => {
                        var use = this.raw[value];
                        return `
                            <ion-accordion value="top-${value}">
                                <ion-item color="${use.color}">
                                    <ion-label slot="header">
                                        <span class="text-decoration-underline">Top ${value}</span>: ${use.title}
                                    </ion-label>
                                 </ion-item>
                                <div slot="content">
                                    <ul>
                                        <li>Goal: ${use.goal_short}</li>
                                        <li>Tip: ${use.rec_short}</li>
                                    </ul>
                                </div>
                            </ion-accordion>
                       `;
                    });
                    items.forEach((el) => { mapped.push(el); });
                    mapped.push('<ion-divider><ion-label>Weaknesses:</ion-label></ion-divider>');
                    this.weaknesses.forEach((wkvalue) => {
                        if(wkvalue.severity > 0.0)
                            mapped.push(makeSummaryItem(wkvalue));
                    });
                    mapped.push('<ion-divider><ion-label>Strengths:</ion-label></ion-divider>');
                    this.strengths.forEach((skvalue) => {
                        if(skvalue.severity > 0.0)
                            mapped.push(makeSummaryItem(skvalue));
                    });
                    console.log(mapped.join('\n'));
                    return `<ion-accordion-group multiple="false">
                                ${mapped.join('\n')}
                            </ion-accordion-group>`;
                }
                get stats() {
                    const max_color = (this.raw_stats.max_bg_value <= 180.0) ? "success" : "danger";
                    const min_color = (this.raw_stats.min_bg_value >= 70.0) ? "success" : "danger";
                    return `
                    <div class="container-fluid grid">
                        <div class="row">
                            <div class="col col-sm border border-secondary border-1 text-small">
                                <table class="table table-sm caption-top">
                                    <caption>Legend (color code)</caption>
                                    <thead>
                                    </thead>
                                    <tbody>
                                        <tr><td><span class="text-danger">Outside "normal" range</span></td></tr>
                                        <tr><td><span class="text-success">Within "normal" range</span></td></tr>
                                    </tbody>
                                </table>
                            </div>
                            <div class="col col-7 border border-3">
                                <table class="table caption-top">
                                    <caption>Blood glucose stats for the given CGM wear period.</caption>
                                    <tbody>
                                        <tr>
                                            <th scope="row">Highest Glucose:</th>
                                            <td class="bg-${max_color}">${parseInt(this.raw_stats.max_bg_value)} mg/dL</td>
                                        </tr>
                                        <tr>
                                            <th scope="row">Lowest BG:</th>
                                            <td class="bg-${min_color}">${parseInt(this.raw_stats.min_bg_value)} mg/dL</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                    `
                }
            }

            // flag to indicate results have not been refreshed yet
            var first_result = true;

            class ViewResults extends HTMLElement {
                
                async recs() {
                    const x = await query_new_results(); // pull latest results
                    console.log("...received recommendations summary results:", x);
                    console.log("weaknesses:");
                    console.table(JSON.parse(x.summary.weaknesses));
                    console.log("strengths:");
                    console.table(JSON.parse(x.summary.strengths));
                    const summary = new SummaryResult(x);
                    return summary;
                }

                async loadResults() {
                    $("ion-spinner").show();
                    var recs;
                    try {
                        recs = await this.recs();
                        $("ion-spinner").hide();
                    } catch (error) {
                        $("ion-spinner").hide();    
                        alert(`
                        No results found...
                        
                        ...likely there isn't sufficient data available to perform the inference.
                         
                        *For Demo users*:
                        Please try logging in as a different sandbox user (e.g., "SandBoxUser1" ).
                        
                        ...if it's still not working, please report this bug with a screenshot to "robbie@pfun.me" with subject line "test.pfun.app: Bug report".
                        
                        Thanks!`);
                        window.location.reload();
                    }
                    let date = new Date();
                    let nowdate = date.toLocaleDateString();
                    let nowtime = date.toLocaleTimeString();
                    nowtime = nowtime.split(".")[0];
                    this.innerHTML = `
                    <ion-header>
                       <ion-toolbar>
                            <ion-buttons slot="start">             
                              <ion-back-button></ion-back-button>
                            </ion-buttons>
                            <ion-title>Results</ion-title>
                            <ion-subtitle>(Updated: ${nowdate}, ${nowtime})</ion-subtitle>
                        </ion-toolbar>
                    </ion-header>
                    <ion-content class="ion-padding">
                        <ion-row class="prevent-select mb-2 border-bottom border-3 border-light bg-primary text-light">
                            <ion-header class="text-justify-center text-center">
                                <i class="bi bi-arrow-clockwise"></i>Pull down to refresh
                            </ion-header>
                        </ion-row>
                        <ion-refresher id="refresher" slot="fixed">
                            <ion-refresher-content></ion-refresher-content>
                        </ion-refresher>
                        <hr />
                        <div class="results">
                            <h1 class="display-3 fw-bold text-center text-justify-center">Results</h1>
                            <hr />
                            <div class="overflow-scroll container-lg">
                                <div id="visual-plan" class="ion-activatable">
                                    ${recs.img}
                                </div>
                            </div>
                            <ion-modal trigger="visual-plan">
                                <ion-content class="container-fluid">
                                    ${recs.img}
                                </ion-content>
                            </ion-modal>
                            <h3 class="text-decoration-underline text-center text-justify-center">Stats</h3>
                            <div id="stats" class="bg-body text-center text-justify-center mw-25">${recs.stats}</div>
                            <h3 class="text-decoration-underline text-center text-justify-center">Strengths & Weaknesses</h3>
                            <div id="strength-weaknesses">${recs.summary}</div>
                        </div>
                    </ion-content>
                    `;
                }

                async connectedCallback() {

                    // retrieve latest results...
                    await this.loadResults();

                    /* post-results */
                    
                    if(first_result) {
                        // no longer the first result
                        first_result = false;

                        // image modal
                        var modal = document.querySelector("ion-modal");
                        const upclasses = "img-fluid d-flex justify-content-center center-block";
                        modal.addEventListener("ionModalWillPresent", (evt) => {
                            console.log("present fullscreen image modal");
                            $("ion-modal > div > ion-content > ion-img")
                                .toggleClass(upclasses)
                                .on("click", (evt) => {
                                    modal.dismiss();
                                });
                        });
                        modal.addEventListener("ionModalWillDismiss", (evt) => {
                            console.log("dismiss image modal");
                            $("ion-modal > div > ion-content > ion-img")
                                .toggleClass(upclasses);
                        });

                        // define refresher behavior
                        var refresher = document.getElementById("refresher");
                        var self = this;
                        
                        refresher.addEventListener("ionRefresh", (evt) => {
                            console.log("refreshing...");
                            setTimeout(() => {
                                console.log("refreshing...");
                                self.loadResults();
                                refresher.complete();
                            }, 1500);
                            console.log("...refreshed.");
                        });
                    }
                }
            }
            
        // define custom elements
        customElements.define("login-dexcom", LoginDexcom);
        customElements.define("view-results", ViewResults);
        </script>
    {% endblock body %}
</body>
