{% macro loading_div(id="loading-div") %}
<div id="{{ id }}" class="spinner-border" role="status">
    <span class="visually-hidden">Loading...</span>
</div>
{% endmacro %}

<div>
    {# recsDialogConfig init script #}
    <script>
        var recsDialog = null;
        document.addEventListener("DOMContentLoaded", () => {

            const which = "bootstrapModal";

            class recsDialogConfig {
                static _opts = {
                    jqueryUI: {
                        setup: () => {
                            return this.recs.dialog({
                                title: "Recommendations Viewer Dialog",
                                width: window.visualViewport.width / 2,
                                height: "auto",
                                autoOpen: false,
                                closeText: '<div class="close">&times;</div>',
                                open: (evt, ui) => {
                                    $(".ui-dialog-titlebar-close")
                                        .removeClass("ui-dialog-titlebar-close")
                                        .addClass("close")
                                        .html('<div class="close">&times;</div>');
                                }
                            });
                        },
                        show: () => {
                            return $("#recs-dialog-container").dialog("open");
                        }
                    },
                    bootstrapOffCanvas: {
                        setup: () => {
                            var container = $("#recs-dialog-container");
                            container.addClass("offcanvas");
                            container.children("header").addClass("offcanvas-header");
                            container.children("body").addClass("offcanvas-body");
                            const recs_oc = new bootstrap.Offcanvas(container);
                            recs_oc.hide();
                            return recs_oc;
                        },
                        show: () => {
                            const diag = $("#recs-dialog-container");
                            diag.show();
                            bootstrap.Offcanvas.getOrCreateInstance(diag).show();
                        }
                    },
                    bootstrapModal: {
                        setup: () => {
                            var container = $("#recs-dialog-container");
                            container.addClass("modal");
                            $(".header").addClass("modal-header");
                            $(".body").addClass("modal-body");
                            $(".btn-close").attr("data-bs-dismiss", "modal");
                            const recs_modal = new bootstrap.Modal("#recs-dialog-container");
                            return recs_modal;
                        },
                        show: () => {
                            try {
                                const modal = bootstrap.Modal.getOrCreateInstance($("#recs-dialog-container")).show();
                            } catch {
                                ''
                            }
                        }
                    },
                };

                static {
                    this.which = which;
                    this.recs = $("#recs-dialog-container");
                    this.opts = this._opts[this.which];
                    this.setup = this.opts.setup;
                    this.show = this.opts.show;
                }

                setup() {
                    const out = recsDialogConfig.setup();
                    return out;
                }

                show() {
                    return recsDialogConfig.show();
                }

                constructor() {
                    this.recs = recsDialogConfig.recs;
                }
            };
            recsDialog = new recsDialogConfig();
            recsDialog.setup();
        });
    </script>
    {# recommendations menu #}
    <div>
        <hr />
        <div class="col-12">
            <button id="load-remote-btn" class="btn btn-outline-secondary">Load saved results (remote storage)</button>
        </div>
    </div>
    <script>
        $(() => {
            $("#load-remote-btn").on("click", async () => {
                await fetch(`/load-model-results`, {
                    method: "GET",
                    headers: {
                        "Content-Accepted": "application/json",
                    },
                })
                    .then((resp) => {
                        const jdata = resp.json();
                        return jdata;
                    }).then((jdata) => { console.log(jdata); })
                    .catch((err) => { console.error(err); alert(`failed to load model results:\n${err}`)});
            });
        });
    </script>
    <div>
        <hr />
        <div class="col-12" style="display:none;"> <!-- turned off for demo -->
            <button id="fit-model-btn" class="btn btn-outline-info">Fit your data to the pfun glucose model</button>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="plot-results-checkbox" name="plot-input"
                    value="plot" checked="checked" />
                <label class="form-check-label" for="plot-results-checkbox">(plot results figure)</label>
            </div>
        </div>
        <div class="col-sm">
            <button id="open-recs-dialog-btn" class="btn btn-md btn-outline-secondary">Open the Results dialog.</button>
        </div>
        <div style="display: none"> <!-- turned off for demo -->
            <div id="fit-data-msg-container">
            </div>
        </div>
    </div>
    <script>
        $(() => {
            // load any previously saved results
            if (localStorage.getItem("recs:plot-model-results")) {
                try {
                    const img = $($.parseHTML(localStorage.getItem("recs:plot-model-results"))).filter("img");
                    $("#plot-model-results > img")[0].src = img[0].src;
                } catch (err) {
                    console.error("failed to get the stored plot-model-results", err);
                }
            }
            if (localStorage.getItem("recs:recs-summary-view")) {
                try {
                    $("#recs-summary-view").html(localStorage.getItem("recs:recs-summary-view"));
                } catch (err) {
                    console.error("failed ot get the stored recs-summary-view", err);
                }
            }
            $("#open-recs-dialog-btn").on("click", () => {
                recsDialog.show();
            });
            async function fit_fun() {
                const checked_plot = ($.inArray("plot", $.makeArray($("input:checked").val())) != -1);
                var endpoint = "/fit-model";
                const loading_div = $.parseHTML(`{{ loading_div() }}`);
                if (checked_plot) {
                    endpoint = `${endpoint}?plot=true`;
                }
                $("#fit-data-msg-container").html(loading_div);
                await fetch(endpoint, {
                    method: "GET",
                    headers: {
                        "Content-Accepted": "application/json",
                    },
                    json: true,
                })
                    .catch((err) => { console.error(err); alert(err); })
                    .then(async (resp) => {
                        const jdata = await resp.json();
                        console.log("received fit-model data.");
                        if (checked_plot) {
                            const img_src = jdata.img_src;
                            const image = new Image();
                            image.src = img_src;
                            $("#plot-model-results > img")[0].src = image.src;
                            // store image to localStorage
                            localStorage.setItem("recs:plot-model-results", $("#plot-model-results").html());
                            $("#plot-model-results").show();
                        } else {
                            $("#model-results-viewer").html(`<pre class="bg-body text-bg-info" style="overflow-y: scroll; max-height: 250px;">${JSON.stringify(jdata)}</pre>`);
                        }
                    })
                    .catch((err) => { console.error(err); alert(err); })
                    .finally(() => { $("#fit-data-msg-container").html(""); });
            }
            $("#fit-model-btn").on("click", fit_fun);
            // populate & view recommendations summary dialog
            $("#generate-recs-btn").on("click", async () => {
                await $("input:checked").prop("checked", false);
                await fit_fun().then(async () => {
                    const recs_endpoint = "/recommendations/summary";
                    const loading_div = $.parseHTML(`{{ loading_div() }}`);
                    $("#generate-recs-message").html(loading_div);
                    const resp = await fetch(recs_endpoint, {
                        method: "GET",
                        headers: {
                            "Content-Accepted": "text/html"
                        }
                    }).then(async (resp) => {
                        const html_resp = await resp.text();
                        if (html_resp != "Internal Server Error") {
                            localStorage.setItem("recs:recs-summary-view", html_resp);
                            await $("#recs-summary-view").html(html_resp);
                            recsDialog.show();
                        } else {
                            $("#generate-recs-message").html("");
                            throw Error("failed to get recommendations (internal server error)");
                        }
                    }).catch((exception) => {
                        alert(`Failed to generate recommendations. Error message:\n\t${exception}`);
                    }).finally(() => {
                        $("#generate-recs-message").html("");
                    });
                });
            });
        });
    </script>
    <div>
        <hr />
        <div class="col-12" id="generate-recs-container">
            <button id="generate-recs-btn" class="btn btn-outline-primary">Generate PFun recommendations</button>
            <div id="generate-recs-message"></div>
        </div>
    </div>
</div>

{# recommendations viewer #}
<div id="recs-dialog-container" style="display: none;">
    <div class="modal-dialog modal-xl">
        <div class="modal-content container-fluid">
            <div class="header">
                <h3>Personalized Chronometabolic Analysis</h3>
                <button type="button" class="btn-close" aria-label="Close"></button>
            </div>
            <div class="body">
                <div class="container-fluid" id="recs-summary-view">
                </div>
            </div>
        </div>
    </div>
</div>

<div>
    <div class="container" id="model-results-viewer" style="display: none;"> <!-- hidden for demo -->
        <figure id="plot-model-results" style="display: none;">
            <img>
        </figure>
    </div>
</div>