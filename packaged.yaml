Transform: AWS::Serverless-2016-10-31
AWSTemplateFormatVersion: '2010-09-09'
Resources:
  ManagedLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes:
      - python3.10
      ContentUri:
        Bucket: cdk-hnb659fds-assets-860311922912-us-east-1
        Key: 937ac23990892c4f13d19b27c881ca206e743357c724556fe16b427d9506f5d7.zip
      LayerName: pfun-cma-model-PFunCMAModelChaliceApp-managed-layer
    Metadata:
      SamResourceId: ManagedLayer
  InvokeLambdaByName:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: cdk-hnb659fds-assets-860311922912-us-east-1
        Key: 9a2ed692fd2850458e5e6653f62655cf237987f18ebc515aef0a87597780be6d.zip
      Handler: app.lambda_invoke
      Layers:
      - Ref: ManagedLayer
      - arn:aws:lambda:us-east-1:860311922912:layer:pfun-cma-model-deps-dev-managed-layer:14
      MemorySize: 128
      Runtime: python3.10
      Tags:
        aws-chalice: version=1.29.0:stage=PFunCMAModelChaliceApp:app=pfun-cma-model
      Timeout: 60
      Tracing: PassThrough
    Metadata:
      SamResourceId: InvokeLambdaByName
  RunModel:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: cdk-hnb659fds-assets-860311922912-us-east-1
        Key: 9a2ed692fd2850458e5e6653f62655cf237987f18ebc515aef0a87597780be6d.zip
      Handler: app.run_model_with_config
      Layers:
      - Ref: ManagedLayer
      - arn:aws:lambda:us-east-1:860311922912:layer:pfun-cma-model-deps-dev-managed-layer:14
      MemorySize: 128
      Runtime: python3.10
      Tags:
        aws-chalice: version=1.29.0:stage=PFunCMAModelChaliceApp:app=pfun-cma-model
      Timeout: 60
      Tracing: PassThrough
    Metadata:
      SamResourceId: RunModel
  RunAtTime:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: cdk-hnb659fds-assets-860311922912-us-east-1
        Key: 9a2ed692fd2850458e5e6653f62655cf237987f18ebc515aef0a87597780be6d.zip
      Handler: app.run_at_time
      Layers:
      - Ref: ManagedLayer
      - arn:aws:lambda:us-east-1:860311922912:layer:pfun-cma-model-deps-dev-managed-layer:14
      MemorySize: 128
      Runtime: python3.10
      Tags:
        aws-chalice: version=1.29.0:stage=PFunCMAModelChaliceApp:app=pfun-cma-model
      Timeout: 60
      Tracing: PassThrough
    Metadata:
      SamResourceId: RunAtTime
  FitModel:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: cdk-hnb659fds-assets-860311922912-us-east-1
        Key: 9a2ed692fd2850458e5e6653f62655cf237987f18ebc515aef0a87597780be6d.zip
      Handler: app.fit_model_to_data
      Layers:
      - Ref: ManagedLayer
      - arn:aws:lambda:us-east-1:860311922912:layer:pfun-cma-model-deps-dev-managed-layer:14
      MemorySize: 128
      Runtime: python3.10
      Tags:
        aws-chalice: version=1.29.0:stage=PFunCMAModelChaliceApp:app=pfun-cma-model
      Timeout: 60
      Tracing: PassThrough
    Metadata:
      SamResourceId: FitModel
  Oauth2Dexcom:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: cdk-hnb659fds-assets-860311922912-us-east-1
        Key: 9a2ed692fd2850458e5e6653f62655cf237987f18ebc515aef0a87597780be6d.zip
      Handler: app.oauth2_dexcom
      Layers:
      - Ref: ManagedLayer
      - arn:aws:lambda:us-east-1:860311922912:layer:pfun-cma-model-deps-dev-managed-layer:14
      MemorySize: 128
      Runtime: python3.10
      Tags:
        aws-chalice: version=1.29.0:stage=PFunCMAModelChaliceApp:app=pfun-cma-model
      Timeout: 60
      Tracing: PassThrough
    Metadata:
      SamResourceId: Oauth2Dexcom
  FakeAuth:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: cdk-hnb659fds-assets-860311922912-us-east-1
        Key: 9a2ed692fd2850458e5e6653f62655cf237987f18ebc515aef0a87597780be6d.zip
      Handler: app.fake_auth
      Layers:
      - Ref: ManagedLayer
      - arn:aws:lambda:us-east-1:860311922912:layer:pfun-cma-model-deps-dev-managed-layer:14
      MemorySize: 128
      Runtime: python3.10
      Tags:
        aws-chalice: version=1.29.0:stage=PFunCMAModelChaliceApp:app=pfun-cma-model
      Timeout: 60
      Tracing: PassThrough
    Metadata:
      SamResourceId: FakeAuth
  APIHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: cdk-hnb659fds-assets-860311922912-us-east-1
        Key: 9a2ed692fd2850458e5e6653f62655cf237987f18ebc515aef0a87597780be6d.zip
      Handler: app.app
      Layers:
      - Ref: ManagedLayer
      - arn:aws:lambda:us-east-1:860311922912:layer:pfun-cma-model-deps-dev-managed-layer:14
      MemorySize: 128
      Runtime: python3.10
      Tags:
        aws-chalice: version=1.29.0:stage=PFunCMAModelChaliceApp:app=pfun-cma-model
      Timeout: 60
      Tracing: PassThrough
    Metadata:
      SamResourceId: APIHandler
  RestAPI:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionBody:
        swagger: '2.0'
        info:
          version: '1.0'
          title: PFun CMA Model Backend
        schemes:
        - https
        paths:
          /sdk:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
              security:
              - fake_auth: []
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Expose-Headers:
                      type: string
                    Access-Control-Max-Age:
                      type: string
                    Access-Control-Allow-Credentials:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Access-Control-Allow-Origin,Authorization,Content-Type,X-API-Key,X-Amz-Date,X-Amz-Security-Token,X-Api-Key,X-RapidAPI-Host,X-RapidAPI-Key,X-RapidAPI-Proxy-Secret'''
                      method.response.header.Access-Control-Expose-Headers: '''X-RapidAPI-Key,X-RapidAPI-Proxy-Secret,X-RapidAPI-Host,X-API-Key,Authorization,Access-Control-Allow-Origin'''
                      method.response.header.Access-Control-Max-Age: '''300'''
                      method.response.header.Access-Control-Allow-Credentials: '''true'''
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                passthroughBehavior: when_no_match
                type: mock
                contentHandling: CONVERT_TO_TEXT
          /:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
              summary: Generates the index page for the web application.
              description: "Returns:\n    Response: The HTTP response object containing\
                \ the index page."
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Expose-Headers:
                      type: string
                    Access-Control-Max-Age:
                      type: string
                    Access-Control-Allow-Credentials:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Access-Control-Allow-Origin,Authorization,Content-Type,X-API-Key,X-Amz-Date,X-Amz-Security-Token,X-Api-Key,X-RapidAPI-Host,X-RapidAPI-Key,X-RapidAPI-Proxy-Secret'''
                      method.response.header.Access-Control-Expose-Headers: '''X-RapidAPI-Key,X-RapidAPI-Proxy-Secret,X-RapidAPI-Host,X-API-Key,Authorization,Access-Control-Allow-Origin'''
                      method.response.header.Access-Control-Max-Age: '''300'''
                      method.response.header.Access-Control-Allow-Credentials: '''true'''
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                passthroughBehavior: when_no_match
                type: mock
                contentHandling: CONVERT_TO_TEXT
          /routes:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Expose-Headers:
                      type: string
                    Access-Control-Max-Age:
                      type: string
                    Access-Control-Allow-Credentials:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Access-Control-Allow-Origin,Authorization,Content-Type,X-API-Key,X-Amz-Date,X-Amz-Security-Token,X-Api-Key,X-RapidAPI-Host,X-RapidAPI-Key,X-RapidAPI-Proxy-Secret'''
                      method.response.header.Access-Control-Expose-Headers: '''X-RapidAPI-Key,X-RapidAPI-Proxy-Secret,X-RapidAPI-Host,X-API-Key,Authorization,Access-Control-Allow-Origin'''
                      method.response.header.Access-Control-Max-Age: '''300'''
                      method.response.header.Access-Control-Allow-Credentials: '''true'''
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                passthroughBehavior: when_no_match
                type: mock
                contentHandling: CONVERT_TO_TEXT
          /log:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
              security:
              - fake_auth: []
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
              security:
              - fake_auth: []
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Expose-Headers:
                      type: string
                    Access-Control-Max-Age:
                      type: string
                    Access-Control-Allow-Credentials:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Access-Control-Allow-Origin,Authorization,Content-Type,X-API-Key,X-Amz-Date,X-Amz-Security-Token,X-Api-Key,X-RapidAPI-Host,X-RapidAPI-Key,X-RapidAPI-Proxy-Secret'''
                      method.response.header.Access-Control-Expose-Headers: '''X-RapidAPI-Key,X-RapidAPI-Proxy-Secret,X-RapidAPI-Host,X-API-Key,Authorization,Access-Control-Allow-Origin'''
                      method.response.header.Access-Control-Max-Age: '''300'''
                      method.response.header.Access-Control-Allow-Credentials: '''true'''
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                passthroughBehavior: when_no_match
                type: mock
                contentHandling: CONVERT_TO_TEXT
          /run:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
              summary: A function that returns a message containing the welcome message
                and the
              description: routes of the PFun CMA Model API.
              security:
              - fake_auth: []
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
              summary: A function that returns a message containing the welcome message
                and the
              description: routes of the PFun CMA Model API.
              security:
              - fake_auth: []
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Expose-Headers:
                      type: string
                    Access-Control-Max-Age:
                      type: string
                    Access-Control-Allow-Credentials:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Access-Control-Allow-Origin,Authorization,Content-Type,X-API-Key,X-Amz-Date,X-Amz-Security-Token,X-Api-Key,X-RapidAPI-Host,X-RapidAPI-Key,X-RapidAPI-Proxy-Secret'''
                      method.response.header.Access-Control-Expose-Headers: '''X-RapidAPI-Key,X-RapidAPI-Proxy-Secret,X-RapidAPI-Host,X-API-Key,Authorization,Access-Control-Allow-Origin'''
                      method.response.header.Access-Control-Max-Age: '''300'''
                      method.response.header.Access-Control-Allow-Credentials: '''true'''
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                passthroughBehavior: when_no_match
                type: mock
                contentHandling: CONVERT_TO_TEXT
          /run-at-time:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
              security:
              - fake_auth: []
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
              security:
              - fake_auth: []
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Expose-Headers:
                      type: string
                    Access-Control-Max-Age:
                      type: string
                    Access-Control-Allow-Credentials:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Access-Control-Allow-Origin,Authorization,Content-Type,X-API-Key,X-Amz-Date,X-Amz-Security-Token,X-Api-Key,X-RapidAPI-Host,X-RapidAPI-Key,X-RapidAPI-Proxy-Secret'''
                      method.response.header.Access-Control-Expose-Headers: '''X-RapidAPI-Key,X-RapidAPI-Proxy-Secret,X-RapidAPI-Host,X-API-Key,Authorization,Access-Control-Allow-Origin'''
                      method.response.header.Access-Control-Max-Age: '''300'''
                      method.response.header.Access-Control-Allow-Credentials: '''true'''
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                passthroughBehavior: when_no_match
                type: mock
                contentHandling: CONVERT_TO_TEXT
          /fit:
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
              security:
              - fake_auth: []
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Expose-Headers:
                      type: string
                    Access-Control-Max-Age:
                      type: string
                    Access-Control-Allow-Credentials:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: '''POST,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Access-Control-Allow-Origin,Authorization,Content-Type,X-API-Key,X-Amz-Date,X-Amz-Security-Token,X-Api-Key,X-RapidAPI-Host,X-RapidAPI-Key,X-RapidAPI-Proxy-Secret'''
                      method.response.header.Access-Control-Expose-Headers: '''X-RapidAPI-Key,X-RapidAPI-Proxy-Secret,X-RapidAPI-Host,X-API-Key,Authorization,Access-Control-Allow-Origin'''
                      method.response.header.Access-Control-Max-Age: '''300'''
                      method.response.header.Access-Control-Allow-Credentials: '''true'''
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                passthroughBehavior: when_no_match
                type: mock
                contentHandling: CONVERT_TO_TEXT
          /login-success:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Expose-Headers:
                      type: string
                    Access-Control-Max-Age:
                      type: string
                    Access-Control-Allow-Credentials:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Access-Control-Allow-Origin,Authorization,Content-Type,X-API-Key,X-Amz-Date,X-Amz-Security-Token,X-Api-Key,X-RapidAPI-Host,X-RapidAPI-Key,X-RapidAPI-Proxy-Secret'''
                      method.response.header.Access-Control-Expose-Headers: '''X-RapidAPI-Key,X-RapidAPI-Proxy-Secret,X-RapidAPI-Host,X-API-Key,Authorization,Access-Control-Allow-Origin'''
                      method.response.header.Access-Control-Max-Age: '''300'''
                      method.response.header.Access-Control-Allow-Credentials: '''true'''
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                passthroughBehavior: when_no_match
                type: mock
                contentHandling: CONVERT_TO_TEXT
          /login-dexcom:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Expose-Headers:
                      type: string
                    Access-Control-Max-Age:
                      type: string
                    Access-Control-Allow-Credentials:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Access-Control-Allow-Origin,Authorization,Content-Type,X-API-Key,X-Amz-Date,X-Amz-Security-Token,X-Api-Key,X-RapidAPI-Host,X-RapidAPI-Key,X-RapidAPI-Proxy-Secret'''
                      method.response.header.Access-Control-Expose-Headers: '''X-RapidAPI-Key,X-RapidAPI-Proxy-Secret,X-RapidAPI-Host,X-API-Key,Authorization,Access-Control-Allow-Origin'''
                      method.response.header.Access-Control-Max-Age: '''300'''
                      method.response.header.Access-Control-Allow-Credentials: '''true'''
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                passthroughBehavior: when_no_match
                type: mock
                contentHandling: CONVERT_TO_TEXT
        definitions:
          Empty:
            type: object
            title: Empty Schema
        x-amazon-apigateway-binary-media-types:
        - application/octet-stream
        - application/x-tar
        - application/zip
        - audio/basic
        - audio/ogg
        - audio/mp4
        - audio/mpeg
        - audio/wav
        - audio/webm
        - image/png
        - image/jpg
        - image/jpeg
        - image/gif
        - video/ogg
        - video/mpeg
        - video/webm
        securityDefinitions:
          fake_auth:
            in: header
            type: apiKey
            name: Authorization
            x-amazon-apigateway-authtype: custom
            x-amazon-apigateway-authorizer:
              type: token
              authorizerUri:
                Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FakeAuth.Arn}/invocations
      EndpointConfiguration: EDGE
      StageName: api
    Metadata:
      SamResourceId: RestAPI
  APIHandlerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: APIHandler
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
        - arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPIId}/*
        - RestAPIId:
            Ref: RestAPI
    Metadata:
      SamResourceId: APIHandlerInvokePermission
  FakeAuthInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - FakeAuth
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
        - arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPIId}/*
        - RestAPIId:
            Ref: RestAPI
    Metadata:
      SamResourceId: FakeAuthInvokePermission
  WebsocketConnect:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: cdk-hnb659fds-assets-860311922912-us-east-1
        Key: 9a2ed692fd2850458e5e6653f62655cf237987f18ebc515aef0a87597780be6d.zip
      Handler: app.run_at_time_connect
      Layers:
      - Ref: ManagedLayer
      - arn:aws:lambda:us-east-1:860311922912:layer:pfun-cma-model-deps-dev-managed-layer:14
      MemorySize: 128
      Runtime: python3.10
      Tags:
        aws-chalice: version=1.29.0:stage=PFunCMAModelChaliceApp:app=pfun-cma-model
      Timeout: 60
      Tracing: PassThrough
    Metadata:
      SamResourceId: WebsocketConnect
  WebsocketMessage:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: cdk-hnb659fds-assets-860311922912-us-east-1
        Key: 9a2ed692fd2850458e5e6653f62655cf237987f18ebc515aef0a87597780be6d.zip
      Handler: app.run_at_time_ws
      Layers:
      - Ref: ManagedLayer
      - arn:aws:lambda:us-east-1:860311922912:layer:pfun-cma-model-deps-dev-managed-layer:14
      MemorySize: 128
      Runtime: python3.10
      Tags:
        aws-chalice: version=1.29.0:stage=PFunCMAModelChaliceApp:app=pfun-cma-model
      Timeout: 60
      Tracing: PassThrough
    Metadata:
      SamResourceId: WebsocketMessage
  WebsocketAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: pfun-cma-model-PFunCMAModelChaliceApp-websocket-api
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action
    Metadata:
      SamResourceId: WebsocketAPI
  WebsocketConnectAPIIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebsocketAPI
      ConnectionType: INTERNET
      ContentHandlingStrategy: CONVERT_TO_TEXT
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
        - arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${WebsocketHandler}/invocations
        - WebsocketHandler:
            Ref: WebsocketConnect
    Metadata:
      SamResourceId: WebsocketConnectAPIIntegration
  WebsocketConnectInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: WebsocketConnect
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
        - arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${WebsocketAPIId}/*
        - WebsocketAPIId:
            Ref: WebsocketAPI
    Metadata:
      SamResourceId: WebsocketConnectInvokePermission
  WebsocketMessageAPIIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebsocketAPI
      ConnectionType: INTERNET
      ContentHandlingStrategy: CONVERT_TO_TEXT
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
        - arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${WebsocketHandler}/invocations
        - WebsocketHandler:
            Ref: WebsocketMessage
    Metadata:
      SamResourceId: WebsocketMessageAPIIntegration
  WebsocketMessageInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: WebsocketMessage
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
        - arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${WebsocketAPIId}/*
        - WebsocketAPIId:
            Ref: WebsocketAPI
    Metadata:
      SamResourceId: WebsocketMessageInvokePermission
  WebsocketConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebsocketAPI
      RouteKey: $connect
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: WebsocketConnectAPIIntegration
    Metadata:
      SamResourceId: WebsocketConnectRoute
  WebsocketMessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebsocketAPI
      RouteKey: $default
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: WebsocketMessageAPIIntegration
    Metadata:
      SamResourceId: WebsocketMessageRoute
  WebsocketAPIDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    Properties:
      ApiId:
        Ref: WebsocketAPI
    DependsOn:
    - WebsocketConnectRoute
    - WebsocketMessageRoute
    Metadata:
      SamResourceId: WebsocketAPIDeployment
  WebsocketAPIStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId:
        Ref: WebsocketAPI
      DeploymentId:
        Ref: WebsocketAPIDeployment
      StageName: api
    Metadata:
      SamResourceId: WebsocketAPIStage
  PFunCMAModelVPC45F492DB:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: PFunCMAModelChaliceApp/PFunCMAModelVPC
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelVPC/Resource
      SamResourceId: PFunCMAModelVPC
  PFunCMAModelVPCprivateSubnet1SubnetDE1059FB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.0.0/18
      MapPublicIpOnLaunch: false
      Tags:
      - Key: aws-cdk:subnet-name
        Value: private
      - Key: aws-cdk:subnet-type
        Value: Private
      - Key: Name
        Value: PFunCMAModelChaliceApp/PFunCMAModelVPC/privateSubnet1
      VpcId:
        Ref: PFunCMAModelVPC45F492DB
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelVPC/privateSubnet1/Subnet
      SamResourceId: Subnet
  PFunCMAModelVPCprivateSubnet1RouteTable4F03F7C7:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value: PFunCMAModelChaliceApp/PFunCMAModelVPC/privateSubnet1
      VpcId:
        Ref: PFunCMAModelVPC45F492DB
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelVPC/privateSubnet1/RouteTable
      SamResourceId: RouteTable
  PFunCMAModelVPCprivateSubnet1RouteTableAssociation7C9A5404:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PFunCMAModelVPCprivateSubnet1RouteTable4F03F7C7
      SubnetId:
        Ref: PFunCMAModelVPCprivateSubnet1SubnetDE1059FB
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelVPC/privateSubnet1/RouteTableAssociation
      SamResourceId: RouteTableAssociation
  PFunCMAModelVPCprivateSubnet1DefaultRoute7BD2250C:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId:
        Ref: PFunCMAModelVPCpublicSubnet1NATGatewayEE43DF7C
      RouteTableId:
        Ref: PFunCMAModelVPCprivateSubnet1RouteTable4F03F7C7
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelVPC/privateSubnet1/DefaultRoute
      SamResourceId: DefaultRoute
  PFunCMAModelVPCprivateSubnet2SubnetD4B15059:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.64.0/18
      MapPublicIpOnLaunch: false
      Tags:
      - Key: aws-cdk:subnet-name
        Value: private
      - Key: aws-cdk:subnet-type
        Value: Private
      - Key: Name
        Value: PFunCMAModelChaliceApp/PFunCMAModelVPC/privateSubnet2
      VpcId:
        Ref: PFunCMAModelVPC45F492DB
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelVPC/privateSubnet2/Subnet
      SamResourceId: Subnet
  PFunCMAModelVPCprivateSubnet2RouteTable1C044654:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value: PFunCMAModelChaliceApp/PFunCMAModelVPC/privateSubnet2
      VpcId:
        Ref: PFunCMAModelVPC45F492DB
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelVPC/privateSubnet2/RouteTable
      SamResourceId: RouteTable
  PFunCMAModelVPCprivateSubnet2RouteTableAssociation97C73F3C:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PFunCMAModelVPCprivateSubnet2RouteTable1C044654
      SubnetId:
        Ref: PFunCMAModelVPCprivateSubnet2SubnetD4B15059
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelVPC/privateSubnet2/RouteTableAssociation
      SamResourceId: RouteTableAssociation
  PFunCMAModelVPCprivateSubnet2DefaultRouteD1033AC0:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId:
        Ref: PFunCMAModelVPCpublicSubnet2NATGatewayA5AA7F99
      RouteTableId:
        Ref: PFunCMAModelVPCprivateSubnet2RouteTable1C044654
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelVPC/privateSubnet2/DefaultRoute
      SamResourceId: DefaultRoute
  PFunCMAModelVPCpublicSubnet1Subnet8C7FD47D:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.128.0/18
      MapPublicIpOnLaunch: true
      Tags:
      - Key: aws-cdk:subnet-name
        Value: public
      - Key: aws-cdk:subnet-type
        Value: Public
      - Key: Name
        Value: PFunCMAModelChaliceApp/PFunCMAModelVPC/publicSubnet1
      VpcId:
        Ref: PFunCMAModelVPC45F492DB
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelVPC/publicSubnet1/Subnet
      SamResourceId: Subnet
  PFunCMAModelVPCpublicSubnet1RouteTableA470CB3E:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value: PFunCMAModelChaliceApp/PFunCMAModelVPC/publicSubnet1
      VpcId:
        Ref: PFunCMAModelVPC45F492DB
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelVPC/publicSubnet1/RouteTable
      SamResourceId: RouteTable
  PFunCMAModelVPCpublicSubnet1RouteTableAssociation1E3CE604:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PFunCMAModelVPCpublicSubnet1RouteTableA470CB3E
      SubnetId:
        Ref: PFunCMAModelVPCpublicSubnet1Subnet8C7FD47D
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelVPC/publicSubnet1/RouteTableAssociation
      SamResourceId: RouteTableAssociation
  PFunCMAModelVPCpublicSubnet1DefaultRouteDE76B87D:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: PFunCMAModelVPCIGW41DFF152
      RouteTableId:
        Ref: PFunCMAModelVPCpublicSubnet1RouteTableA470CB3E
    DependsOn:
    - PFunCMAModelVPCVPCGWB5B9A62D
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelVPC/publicSubnet1/DefaultRoute
      SamResourceId: DefaultRoute
  PFunCMAModelVPCpublicSubnet1EIP7E238277:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: PFunCMAModelChaliceApp/PFunCMAModelVPC/publicSubnet1
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelVPC/publicSubnet1/EIP
      SamResourceId: EIP
  PFunCMAModelVPCpublicSubnet1NATGatewayEE43DF7C:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - PFunCMAModelVPCpublicSubnet1EIP7E238277
        - AllocationId
      SubnetId:
        Ref: PFunCMAModelVPCpublicSubnet1Subnet8C7FD47D
      Tags:
      - Key: Name
        Value: PFunCMAModelChaliceApp/PFunCMAModelVPC/publicSubnet1
    DependsOn:
    - PFunCMAModelVPCpublicSubnet1DefaultRouteDE76B87D
    - PFunCMAModelVPCpublicSubnet1RouteTableAssociation1E3CE604
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelVPC/publicSubnet1/NATGateway
      SamResourceId: NATGateway
  PFunCMAModelVPCpublicSubnet2SubnetB6BCDE86:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.192.0/18
      MapPublicIpOnLaunch: true
      Tags:
      - Key: aws-cdk:subnet-name
        Value: public
      - Key: aws-cdk:subnet-type
        Value: Public
      - Key: Name
        Value: PFunCMAModelChaliceApp/PFunCMAModelVPC/publicSubnet2
      VpcId:
        Ref: PFunCMAModelVPC45F492DB
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelVPC/publicSubnet2/Subnet
      SamResourceId: Subnet
  PFunCMAModelVPCpublicSubnet2RouteTableA662863B:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value: PFunCMAModelChaliceApp/PFunCMAModelVPC/publicSubnet2
      VpcId:
        Ref: PFunCMAModelVPC45F492DB
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelVPC/publicSubnet2/RouteTable
      SamResourceId: RouteTable
  PFunCMAModelVPCpublicSubnet2RouteTableAssociation80285FB0:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PFunCMAModelVPCpublicSubnet2RouteTableA662863B
      SubnetId:
        Ref: PFunCMAModelVPCpublicSubnet2SubnetB6BCDE86
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelVPC/publicSubnet2/RouteTableAssociation
      SamResourceId: RouteTableAssociation
  PFunCMAModelVPCpublicSubnet2DefaultRoute6684FA33:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: PFunCMAModelVPCIGW41DFF152
      RouteTableId:
        Ref: PFunCMAModelVPCpublicSubnet2RouteTableA662863B
    DependsOn:
    - PFunCMAModelVPCVPCGWB5B9A62D
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelVPC/publicSubnet2/DefaultRoute
      SamResourceId: DefaultRoute
  PFunCMAModelVPCpublicSubnet2EIPDBD8EB1A:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: PFunCMAModelChaliceApp/PFunCMAModelVPC/publicSubnet2
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelVPC/publicSubnet2/EIP
      SamResourceId: EIP
  PFunCMAModelVPCpublicSubnet2NATGatewayA5AA7F99:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - PFunCMAModelVPCpublicSubnet2EIPDBD8EB1A
        - AllocationId
      SubnetId:
        Ref: PFunCMAModelVPCpublicSubnet2SubnetB6BCDE86
      Tags:
      - Key: Name
        Value: PFunCMAModelChaliceApp/PFunCMAModelVPC/publicSubnet2
    DependsOn:
    - PFunCMAModelVPCpublicSubnet2DefaultRoute6684FA33
    - PFunCMAModelVPCpublicSubnet2RouteTableAssociation80285FB0
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelVPC/publicSubnet2/NATGateway
      SamResourceId: NATGateway
  PFunCMAModelVPCIGW41DFF152:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: PFunCMAModelChaliceApp/PFunCMAModelVPC
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelVPC/IGW
      SamResourceId: IGW
  PFunCMAModelVPCVPCGWB5B9A62D:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: PFunCMAModelVPCIGW41DFF152
      VpcId:
        Ref: PFunCMAModelVPC45F492DB
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelVPC/VPCGW
      SamResourceId: VPCGW
  PFunCMAModelLoadBalancer930A86BD:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
      - Key: deletion_protection.enabled
        Value: 'false'
      Scheme: internal
      SecurityGroups:
      - Fn::GetAtt:
        - PFunCMAModelLoadBalancerSecurityGroupE55A7C00
        - GroupId
      - Fn::GetAtt:
        - PFunAlbSecurityGroupDA3A5D19
        - GroupId
      Subnets:
      - Ref: PFunCMAModelVPCprivateSubnet1SubnetDE1059FB
      - Ref: PFunCMAModelVPCprivateSubnet2SubnetD4B15059
      Type: application
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelLoadBalancer/Resource
      SamResourceId: PFunCMAModelLoadBalancer
  PFunCMAModelLoadBalancerSecurityGroupE55A7C00:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB PFunCMAModelChaliceAppPFunCMAModelLoadBalancerB4AEA142
      SecurityGroupEgress:
      - CidrIp: 255.255.255.255/32
        Description: Disallow all traffic
        FromPort: 252
        IpProtocol: icmp
        ToPort: 86
      VpcId:
        Ref: PFunCMAModelVPC45F492DB
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelLoadBalancer/SecurityGroup/Resource
      SamResourceId: SecurityGroup
  PFunAlbSecurityGroupDA3A5D19:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: PFunCMAModelChaliceApp/PFunAlbSecurityGroup
      SecurityGroupEgress:
      - CidrIp: '0.0.0.0/0'
        Description: Allow all outbound traffic by default
        IpProtocol: '-1'
      VpcId:
        Ref: PFunCMAModelVPC45F492DB
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunAlbSecurityGroup/Resource
      SamResourceId: PFunAlbSecurityGroup
  ManagedCustomPolicyLambdaInvokeAndListFunctions71A35889:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - lambda:ListFunctions
          - lambda:InvokeFunction
          Effect: Allow
          Resource: '*'
        Version: '2012-10-17'
      PolicyName: ManagedCustomPolicyLambdaListFunctionsAndInvoke
      Roles:
      - Ref: ManagedInstanceRolerole3BBF2FD5
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/ManagedCustomPolicyLambdaInvokeAndListFunctions/Resource
      SamResourceId: ManagedCustomPolicyLambdaInvokeAndListFunctions
  ManagedInstanceRolerole3BBF2FD5:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - Fn::Join:
        - ''
        - - 'arn:'
          - Ref: AWS::Partition
          - :iam::aws:policy/AmazonSSMManagedInstanceCore
      - Fn::Join:
        - ''
        - - 'arn:'
          - Ref: AWS::Partition
          - :iam::aws:policy/AmazonSSMDirectoryServiceAccess
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/ManagedInstanceRole/role/Resource
      SamResourceId: role
  ManagedInstanceRoleinstanceProfile7D74766D:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - Ref: ManagedInstanceRolerole3BBF2FD5
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/ManagedInstanceRole/instanceProfile
      SamResourceId: instanceProfile
  PFunCMAModelAPIGateway8F423C17:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: PFunCMAModelAPIGateway
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelAPIGateway/Resource
      SamResourceId: PFunCMAModelAPIGateway
  PFunCMAModelAPIGatewayCloudWatchRoleC1C1D9B7:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - Fn::Join:
        - ''
        - - 'arn:'
          - Ref: AWS::Partition
          - :iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelAPIGateway/CloudWatchRole/Resource
      SamResourceId: CloudWatchRole
  PFunCMAModelAPIGatewayAccount13233CEC:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
        - PFunCMAModelAPIGatewayCloudWatchRoleC1C1D9B7
        - Arn
    DependsOn:
    - PFunCMAModelAPIGateway8F423C17
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelAPIGateway/Account
      SamResourceId: Account
  PFunCMAModelAPIGatewayDeployment4E1DD87792f2fb7a6f44d29e5ae88507d00ed8e8:
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: Automatically created by the RestApi construct
      RestApiId:
        Ref: PFunCMAModelAPIGateway8F423C17
    DependsOn:
    - PFunCMAModelAPIGatewayproxyANYD3B9CFE7
    - PFunCMAModelAPIGatewayproxyE434090B
    - PFunCMAModelAPIGatewayANY013C3632
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelAPIGateway/Deployment/Resource
      SamResourceId: Deployment
  PFunCMAModelAPIGatewayDeploymentStageprodF4B4E490:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId:
        Ref: PFunCMAModelAPIGatewayDeployment4E1DD87792f2fb7a6f44d29e5ae88507d00ed8e8
      RestApiId:
        Ref: PFunCMAModelAPIGateway8F423C17
      StageName: prod
    DependsOn:
    - PFunCMAModelAPIGatewayAccount13233CEC
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelAPIGateway/DeploymentStage.prod/Resource
      SamResourceId: DeploymentStage.prod
  PFunCMAModelAPIGatewayproxyE434090B:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
        - PFunCMAModelAPIGateway8F423C17
        - RootResourceId
      PathPart: '{proxy+}'
      RestApiId:
        Ref: PFunCMAModelAPIGateway8F423C17
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelAPIGateway/Default/{proxy+}/Resource
      SamResourceId: '{proxy+}'
  PFunCMAModelAPIGatewayproxyANYApiPermissionPFunCMAModelChaliceAppPFunCMAModelAPIGateway6A14670EANYproxy0AA7A3C7:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - APIHandler
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:'
          - Ref: AWS::Partition
          - ':execute-api:us-east-1:860311922912:'
          - Ref: PFunCMAModelAPIGateway8F423C17
          - /
          - Ref: PFunCMAModelAPIGatewayDeploymentStageprodF4B4E490
          - /*/*
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelAPIGateway/Default/{proxy+}/ANY/ApiPermission.PFunCMAModelChaliceAppPFunCMAModelAPIGateway6A14670E.ANY..{proxy+}
      SamResourceId: ApiPermission.PFunCMAModelChaliceAppPFunCMAModelAPIGateway6A14670E.ANY..{proxy+}
  PFunCMAModelAPIGatewayproxyANYApiPermissionTestPFunCMAModelChaliceAppPFunCMAModelAPIGateway6A14670EANYproxy4BC18523:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - APIHandler
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:'
          - Ref: AWS::Partition
          - ':execute-api:us-east-1:860311922912:'
          - Ref: PFunCMAModelAPIGateway8F423C17
          - /test-invoke-stage/*/*
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelAPIGateway/Default/{proxy+}/ANY/ApiPermission.Test.PFunCMAModelChaliceAppPFunCMAModelAPIGateway6A14670E.ANY..{proxy+}
      SamResourceId: ApiPermission.Test.PFunCMAModelChaliceAppPFunCMAModelAPIGateway6A14670E.ANY..{proxy+}
  PFunCMAModelAPIGatewayproxyANYD3B9CFE7:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
          - ''
          - - 'arn:'
            - Ref: AWS::Partition
            - :apigateway:us-east-1:lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
              - APIHandler
              - Arn
            - /invocations
      ResourceId:
        Ref: PFunCMAModelAPIGatewayproxyE434090B
      RestApiId:
        Ref: PFunCMAModelAPIGateway8F423C17
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelAPIGateway/Default/{proxy+}/ANY/Resource
      SamResourceId: ANY
  PFunCMAModelAPIGatewayANYApiPermissionPFunCMAModelChaliceAppPFunCMAModelAPIGateway6A14670EANY25CBE2EA:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - APIHandler
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:'
          - Ref: AWS::Partition
          - ':execute-api:us-east-1:860311922912:'
          - Ref: PFunCMAModelAPIGateway8F423C17
          - /
          - Ref: PFunCMAModelAPIGatewayDeploymentStageprodF4B4E490
          - /*/
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelAPIGateway/Default/ANY/ApiPermission.PFunCMAModelChaliceAppPFunCMAModelAPIGateway6A14670E.ANY..
      SamResourceId: ApiPermission.PFunCMAModelChaliceAppPFunCMAModelAPIGateway6A14670E.ANY..
  PFunCMAModelAPIGatewayANYApiPermissionTestPFunCMAModelChaliceAppPFunCMAModelAPIGateway6A14670EANY9D396C78:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - APIHandler
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:'
          - Ref: AWS::Partition
          - ':execute-api:us-east-1:860311922912:'
          - Ref: PFunCMAModelAPIGateway8F423C17
          - /test-invoke-stage/*/
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelAPIGateway/Default/ANY/ApiPermission.Test.PFunCMAModelChaliceAppPFunCMAModelAPIGateway6A14670E.ANY..
      SamResourceId: ApiPermission.Test.PFunCMAModelChaliceAppPFunCMAModelAPIGateway6A14670E.ANY..
  PFunCMAModelAPIGatewayANY013C3632:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
          - ''
          - - 'arn:'
            - Ref: AWS::Partition
            - :apigateway:us-east-1:lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
              - APIHandler
              - Arn
            - /invocations
      ResourceId:
        Fn::GetAtt:
        - PFunCMAModelAPIGateway8F423C17
        - RootResourceId
      RestApiId:
        Ref: PFunCMAModelAPIGateway8F423C17
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelAPIGateway/Default/ANY/Resource
      SamResourceId: ANY
  PFunCMAModelCloudFrontToAPIGatewaySetHttpSecurityHeadersCEC1B6A8:
    Type: AWS::CloudFront::Function
    Properties:
      AutoPublish: true
      FunctionCode: 'function handler(event) { var response = event.response; var
        headers = response.headers; headers[''strict-transport-security''] = { value:
        ''max-age=63072000; includeSubdomains; preload''}; headers[''content-security-policy'']
        = { value: "default-src ''none''; img-src ''self''; script-src ''self''; style-src
        ''self''; object-src ''none''"}; headers[''x-content-type-options''] = { value:
        ''nosniff''}; headers[''x-frame-options''] = {value: ''DENY''}; headers[''x-xss-protection'']
        = {value: ''1; mode=block''}; return response; }'
      FunctionConfig:
        Comment: SetHttpSecurityHeadersc833fa54bef79a87136d7a5af7bc77f510c3dd6237
        Runtime: cloudfront-js-1.0
      Name: SetHttpSecurityHeadersc833fa54bef79a87136d7a5af7bc77f510c3dd6237
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelCloudFrontToAPIGateway/SetHttpSecurityHeaders/Resource
      SamResourceId: SetHttpSecurityHeaders
  PFunCMAModelCloudFrontToAPIGatewayCloudfrontLoggingBucketB31E2770:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      OwnershipControls:
        Rules:
        - ObjectOwnership: ObjectWriter
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelCloudFrontToAPIGateway/CloudfrontLoggingBucket/Resource
      cfn_nag:
        rules_to_suppress:
        - id: W35
          reason: This S3 bucket is used as the access logging bucket for CloudFront
            Distribution
      SamResourceId: CloudfrontLoggingBucket
  PFunCMAModelCloudFrontToAPIGatewayCloudfrontLoggingBucketPolicyE642E650:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: PFunCMAModelCloudFrontToAPIGatewayCloudfrontLoggingBucketB31E2770
      PolicyDocument:
        Statement:
        - Action: s3:*
          Condition:
            Bool:
              aws:SecureTransport: 'false'
          Effect: Deny
          Principal:
            AWS: '*'
          Resource:
          - Fn::GetAtt:
            - PFunCMAModelCloudFrontToAPIGatewayCloudfrontLoggingBucketB31E2770
            - Arn
          - Fn::Join:
            - ''
            - - Fn::GetAtt:
                - PFunCMAModelCloudFrontToAPIGatewayCloudfrontLoggingBucketB31E2770
                - Arn
              - /*
        Version: '2012-10-17'
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelCloudFrontToAPIGateway/CloudfrontLoggingBucket/Policy/Resource
      SamResourceId: Policy
  PFunCMAModelCloudFrontToAPIGatewayCloudFrontDistribution023CAACA:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          Compress: true
          FunctionAssociations:
          - EventType: viewer-response
            FunctionARN:
              Fn::GetAtt:
              - PFunCMAModelCloudFrontToAPIGatewaySetHttpSecurityHeadersCEC1B6A8
              - FunctionARN
          TargetOriginId: PFunCMAModelChaliceAppPFunCMAModelCloudFrontToAPIGatewayCloudFrontDistributionOrigin157D6F971
          ViewerProtocolPolicy: redirect-to-https
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Logging:
          Bucket:
            Fn::GetAtt:
            - PFunCMAModelCloudFrontToAPIGatewayCloudfrontLoggingBucketB31E2770
            - RegionalDomainName
        Origins:
        - CustomOriginConfig:
            OriginProtocolPolicy: https-only
            OriginSSLProtocols:
            - TLSv1.2
          DomainName:
            Fn::Select:
            - 0
            - Fn::Split:
              - /
              - Fn::Select:
                - 1
                - Fn::Split:
                  - ://
                  - Fn::Join:
                    - ''
                    - - https://
                      - Ref: PFunCMAModelAPIGateway8F423C17
                      - .execute-api.us-east-1.
                      - Ref: AWS::URLSuffix
                      - /
                      - Ref: PFunCMAModelAPIGatewayDeploymentStageprodF4B4E490
                      - /
          Id: PFunCMAModelChaliceAppPFunCMAModelCloudFrontToAPIGatewayCloudFrontDistributionOrigin157D6F971
          OriginPath:
            Fn::Join:
            - ''
            - - /
              - Ref: PFunCMAModelAPIGatewayDeploymentStageprodF4B4E490
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunCMAModelCloudFrontToAPIGateway/CloudFrontDistribution/Resource
      cfn_nag:
        rules_to_suppress:
        - id: W70
          reason: Since the distribution uses the CloudFront domain name, CloudFront
            automatically sets the security policy to TLSv1 regardless of the value
            of MinimumProtocolVersion
      SamResourceId: CloudFrontDistribution
  PFunDevCMAModelCustomDomainName37EDFE0E:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: dev.pfun.app
      EndpointConfiguration:
        Types:
        - REGIONAL
      RegionalCertificateArn: arn:aws:acm:us-east-1:860311922912:certificate/01704bec-f302-4d8a-a1ae-b211d880a9d6
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunDevCMAModelCustomDomainName/Resource
      SamResourceId: PFunDevCMAModelCustomDomainName
  PFunDevCMAModelCustomDomainNameMapPFunCMAModelChaliceAppPFunDevCMAModelCustomDomainNameMapping6E32F02B9C1184A8:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName:
        Ref: PFunDevCMAModelCustomDomainName37EDFE0E
      RestApiId:
        Fn::GetAtt:
        - RestAPI
        - RestApiId
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/PFunDevCMAModelCustomDomainName/Map:--=>PFunCMAModelChaliceAppPFunDevCMAModelCustomDomainNameMapping6E32F02B/Resource
      SamResourceId: Map:--=>PFunCMAModelChaliceAppPFunDevCMAModelCustomDomainNameMapping6E32F02B
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/21TTW/jIBD9Lb0T2m162dsmzbaKlO5aSZVrNMYkYYPBgqFdy/J/3wHbsVOtZJk3j2G+Hjzy5vucP9zBp5+J4jLTKufNDkFcGFGHxs8P4L1EzxdxYX7Om2UQF4lL8JJ1kD0fTY+6JbNaiXqkO7tlHkreELuBWrq9dF5ZE71eghHY40WlWqahzAtIvpl0pfLJc3CLqVsGlToByk+oPx6TJ52MAdYG5cnBEG9rA8oIVrLSti6lSfVSjycKIgWd3VciUvvsmWVOfVDQXchN19eIUqB3yLUc+ZGj8VihvmTNQk6NjyF+rrO4/AJ87Sof6nXkMKGokt5aIGlxTkXvpAhOYf3qbKhSCVOCWtHgUQltochBgxHKnOJkFlVFRaTKNrS3THvSxQhTu2UqqjNK16Ot7Roe1rXxGA9kzh6VvtGBN5uk21Z67MWYwIUQNlAftzpMrCTJVRtGR21wQqaLRtn+1gPTB+7wm8SzLSLVoz5lOrayJSiad9ndgNGKuxng+Q2qiuaUruot1TIaZSiOzhrkzfSGXvFKeXQqD8PG1G5bll5M7CUm6IJZVyYhDsoIHQrJ00ATjAF+B6wCsv/12bKnJ3qnP+JD9VanHPRk6YcuCPT36QVfK55NVHmO7Etk3y0Npr9ZLctqmpe5n/NvD/TN7v54pWaOJFKl5Ntu/QdbkaYAIAQAAA==
    Metadata:
      aws:cdk:path: PFunCMAModelChaliceApp/CDKMetadata/Default
      SamResourceId: Default
Outputs:
  RestAPIId:
    Value:
      Ref: RestAPI
  APIHandlerName:
    Value:
      Ref: APIHandler
  APIHandlerArn:
    Value:
      Fn::GetAtt:
      - APIHandler
      - Arn
  EndpointURL:
    Value:
      Fn::Sub: https://${RestAPI}.execute-api.${AWS::Region}.${AWS::URLSuffix}/api/
  WebsocketAPIId:
    Value:
      Ref: WebsocketAPI
  WebsocketConnectHandlerArn:
    Value:
      Fn::GetAtt:
      - WebsocketConnect
      - Arn
  WebsocketConnectHandlerName:
    Value:
      Ref: WebsocketConnect
  WebsocketMessageHandlerArn:
    Value:
      Fn::GetAtt:
      - WebsocketMessage
      - Arn
  WebsocketMessageHandlerName:
    Value:
      Ref: WebsocketMessage
  WebsocketConnectEndpointURL:
    Value:
      Fn::Sub: wss://${WebsocketAPI}.execute-api.${AWS::Region}.${AWS::URLSuffix}/api/
  PFunCMAModelAPIGatewayEndpointD88762A0:
    Value:
      Fn::Join:
      - ''
      - - https://
        - Ref: PFunCMAModelAPIGateway8F423C17
        - .execute-api.us-east-1.
        - Ref: AWS::URLSuffix
        - /
        - Ref: PFunCMAModelAPIGatewayDeploymentStageprodF4B4E490
        - /
  PFunAlbDNSName:
    Value:
      Fn::GetAtt:
      - PFunCMAModelLoadBalancer930A86BD
      - DNSName
  PFunDevCMAModelCustomDomainNameRawOutput:
    Value: dev.pfun.app
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically
      retrieved from SSM Parameter Store. [cdk:skip]
Rules:
  CheckBootstrapVersion:
    Assertions:
    - Assert:
        Fn::Not:
        - Fn::Contains:
          - - '1'
            - '2'
            - '3'
            - '4'
            - '5'
          - Ref: BootstrapVersion
      AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap'
        with a recent version of the CDK CLI.
