{
 "Transform": "AWS::Serverless-2016-10-31",
 "AWSTemplateFormatVersion": "2010-09-09",
 "Resources": {
  "ManagedLayer": {
   "Type": "AWS::Serverless::LayerVersion",
   "Properties": {
    "CompatibleRuntimes": [
     "python3.10"
    ],
    "ContentUri": {
     "Bucket": "cdk-hnb659fds-assets-860311922912-us-east-1",
     "Key": "937ac23990892c4f13d19b27c881ca206e743357c724556fe16b427d9506f5d7.zip"
    },
    "LayerName": "pfun-cma-model-PFunCMAModelPipeline/AppStage/ChaliceApp-managed-layer"
   }
  },
  "RunModel": {
   "Type": "AWS::Serverless::Function",
   "Properties": {
    "CodeUri": {
     "Bucket": "cdk-hnb659fds-assets-860311922912-us-east-1",
     "Key": "416d2d609900ffe839708b890766dc2535c3254ba7af5e9f7b96480826718852.zip"
    },
    "Handler": "app.run_model_with_config",
    "Layers": [
     {
      "Ref": "ManagedLayer"
     },
     "arn:aws:lambda:us-east-1:860311922912:layer:pfun-cma-model-deps-dev-managed-layer:14"
    ],
    "MemorySize": 128,
    "Runtime": "python3.10",
    "Tags": {
     "aws-chalice": "version=1.29.0:stage=PFunCMAModelPipeline/AppStage/ChaliceApp:app=pfun-cma-model"
    },
    "Timeout": 60,
    "Tracing": "PassThrough"
   }
  },
  "RunAtTime": {
   "Type": "AWS::Serverless::Function",
   "Properties": {
    "CodeUri": {
     "Bucket": "cdk-hnb659fds-assets-860311922912-us-east-1",
     "Key": "416d2d609900ffe839708b890766dc2535c3254ba7af5e9f7b96480826718852.zip"
    },
    "Handler": "app.run_at_time",
    "Layers": [
     {
      "Ref": "ManagedLayer"
     },
     "arn:aws:lambda:us-east-1:860311922912:layer:pfun-cma-model-deps-dev-managed-layer:14"
    ],
    "MemorySize": 128,
    "Runtime": "python3.10",
    "Tags": {
     "aws-chalice": "version=1.29.0:stage=PFunCMAModelPipeline/AppStage/ChaliceApp:app=pfun-cma-model"
    },
    "Timeout": 60,
    "Tracing": "PassThrough"
   }
  },
  "FitModel": {
   "Type": "AWS::Serverless::Function",
   "Properties": {
    "CodeUri": {
     "Bucket": "cdk-hnb659fds-assets-860311922912-us-east-1",
     "Key": "416d2d609900ffe839708b890766dc2535c3254ba7af5e9f7b96480826718852.zip"
    },
    "Handler": "app.fit_model_to_data",
    "Layers": [
     {
      "Ref": "ManagedLayer"
     },
     "arn:aws:lambda:us-east-1:860311922912:layer:pfun-cma-model-deps-dev-managed-layer:14"
    ],
    "MemorySize": 128,
    "Runtime": "python3.10",
    "Tags": {
     "aws-chalice": "version=1.29.0:stage=PFunCMAModelPipeline/AppStage/ChaliceApp:app=pfun-cma-model"
    },
    "Timeout": 60,
    "Tracing": "PassThrough"
   }
  },
  "Oauth2Dexcom": {
   "Type": "AWS::Serverless::Function",
   "Properties": {
    "CodeUri": {
     "Bucket": "cdk-hnb659fds-assets-860311922912-us-east-1",
     "Key": "416d2d609900ffe839708b890766dc2535c3254ba7af5e9f7b96480826718852.zip"
    },
    "Handler": "app.oauth2_dexcom",
    "Layers": [
     {
      "Ref": "ManagedLayer"
     },
     "arn:aws:lambda:us-east-1:860311922912:layer:pfun-cma-model-deps-dev-managed-layer:14"
    ],
    "MemorySize": 128,
    "Runtime": "python3.10",
    "Tags": {
     "aws-chalice": "version=1.29.0:stage=PFunCMAModelPipeline/AppStage/ChaliceApp:app=pfun-cma-model"
    },
    "Timeout": 60,
    "Tracing": "PassThrough"
   }
  },
  "FakeAuth": {
   "Type": "AWS::Serverless::Function",
   "Properties": {
    "CodeUri": {
     "Bucket": "cdk-hnb659fds-assets-860311922912-us-east-1",
     "Key": "416d2d609900ffe839708b890766dc2535c3254ba7af5e9f7b96480826718852.zip"
    },
    "Handler": "app.fake_auth",
    "Layers": [
     {
      "Ref": "ManagedLayer"
     },
     "arn:aws:lambda:us-east-1:860311922912:layer:pfun-cma-model-deps-dev-managed-layer:14"
    ],
    "MemorySize": 128,
    "Runtime": "python3.10",
    "Tags": {
     "aws-chalice": "version=1.29.0:stage=PFunCMAModelPipeline/AppStage/ChaliceApp:app=pfun-cma-model"
    },
    "Timeout": 60,
    "Tracing": "PassThrough"
   }
  },
  "APIHandler": {
   "Type": "AWS::Serverless::Function",
   "Properties": {
    "CodeUri": {
     "Bucket": "cdk-hnb659fds-assets-860311922912-us-east-1",
     "Key": "416d2d609900ffe839708b890766dc2535c3254ba7af5e9f7b96480826718852.zip"
    },
    "Handler": "app.app",
    "Layers": [
     {
      "Ref": "ManagedLayer"
     },
     "arn:aws:lambda:us-east-1:860311922912:layer:pfun-cma-model-deps-dev-managed-layer:14"
    ],
    "MemorySize": 128,
    "Runtime": "python3.10",
    "Tags": {
     "aws-chalice": "version=1.29.0:stage=PFunCMAModelPipeline/AppStage/ChaliceApp:app=pfun-cma-model"
    },
    "Timeout": 60,
    "Tracing": "PassThrough"
   }
  },
  "RestAPI": {
   "Type": "AWS::Serverless::Api",
   "Properties": {
    "DefinitionBody": {
     "swagger": "2.0",
     "info": {
      "version": "1.0",
      "title": "PFun CMA Model Backend"
     },
     "schemes": [
      "https"
     ],
     "paths": {
      "/sdk": {
       "get": {
        "consumes": [
         "application/json"
        ],
        "produces": [
         "application/json"
        ],
        "responses": {
         "200": {
          "description": "200 response",
          "schema": {
           "$ref": "#/definitions/Empty"
          }
         }
        },
        "x-amazon-apigateway-integration": {
         "responses": {
          "default": {
           "statusCode": "200"
          }
         },
         "uri": {
          "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
         },
         "passthroughBehavior": "when_no_match",
         "httpMethod": "POST",
         "contentHandling": "CONVERT_TO_TEXT",
         "type": "aws_proxy"
        },
        "security": [
         {
          "fake_auth": []
         }
        ]
       },
       "options": {
        "consumes": [
         "application/json"
        ],
        "produces": [
         "application/json"
        ],
        "responses": {
         "200": {
          "description": "200 response",
          "schema": {
           "$ref": "#/definitions/Empty"
          },
          "headers": {
           "Access-Control-Allow-Methods": {
            "type": "string"
           },
           "Access-Control-Allow-Origin": {
            "type": "string"
           },
           "Access-Control-Allow-Headers": {
            "type": "string"
           },
           "Access-Control-Expose-Headers": {
            "type": "string"
           },
           "Access-Control-Max-Age": {
            "type": "string"
           },
           "Access-Control-Allow-Credentials": {
            "type": "string"
           }
          }
         }
        },
        "x-amazon-apigateway-integration": {
         "responses": {
          "default": {
           "statusCode": "200",
           "responseParameters": {
            "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
            "method.response.header.Access-Control-Allow-Origin": "'*'",
            "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-API-Key,X-Amz-Date,X-Amz-Security-Token,X-Api-Key,X-RapidAPI-Host,X-RapidAPI-Key,X-RapidAPI-Proxy-Secret'",
            "method.response.header.Access-Control-Expose-Headers": "'X-RapidAPI-Key,X-RapidAPI-Proxy-Secret,X-RapidAPI-Host,X-API-Key,Authorization'",
            "method.response.header.Access-Control-Max-Age": "'300'",
            "method.response.header.Access-Control-Allow-Credentials": "'true'"
           }
          }
         },
         "requestTemplates": {
          "application/json": "{\"statusCode\": 200}"
         },
         "passthroughBehavior": "when_no_match",
         "type": "mock",
         "contentHandling": "CONVERT_TO_TEXT"
        }
       }
      },
      "/": {
       "get": {
        "consumes": [
         "application/json"
        ],
        "produces": [
         "application/json"
        ],
        "responses": {
         "200": {
          "description": "200 response",
          "schema": {
           "$ref": "#/definitions/Empty"
          }
         }
        },
        "x-amazon-apigateway-integration": {
         "responses": {
          "default": {
           "statusCode": "200"
          }
         },
         "uri": {
          "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
         },
         "passthroughBehavior": "when_no_match",
         "httpMethod": "POST",
         "contentHandling": "CONVERT_TO_TEXT",
         "type": "aws_proxy"
        },
        "summary": "Generates the index page for the web application.",
        "description": "Returns:\n    Response: The HTTP response object containing the index page."
       },
       "options": {
        "consumes": [
         "application/json"
        ],
        "produces": [
         "application/json"
        ],
        "responses": {
         "200": {
          "description": "200 response",
          "schema": {
           "$ref": "#/definitions/Empty"
          },
          "headers": {
           "Access-Control-Allow-Methods": {
            "type": "string"
           },
           "Access-Control-Allow-Origin": {
            "type": "string"
           },
           "Access-Control-Allow-Headers": {
            "type": "string"
           },
           "Access-Control-Expose-Headers": {
            "type": "string"
           },
           "Access-Control-Max-Age": {
            "type": "string"
           },
           "Access-Control-Allow-Credentials": {
            "type": "string"
           }
          }
         }
        },
        "x-amazon-apigateway-integration": {
         "responses": {
          "default": {
           "statusCode": "200",
           "responseParameters": {
            "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
            "method.response.header.Access-Control-Allow-Origin": "'*'",
            "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-API-Key,X-Amz-Date,X-Amz-Security-Token,X-Api-Key,X-RapidAPI-Host,X-RapidAPI-Key,X-RapidAPI-Proxy-Secret'",
            "method.response.header.Access-Control-Expose-Headers": "'X-RapidAPI-Key,X-RapidAPI-Proxy-Secret,X-RapidAPI-Host,X-API-Key,Authorization'",
            "method.response.header.Access-Control-Max-Age": "'300'",
            "method.response.header.Access-Control-Allow-Credentials": "'true'"
           }
          }
         },
         "requestTemplates": {
          "application/json": "{\"statusCode\": 200}"
         },
         "passthroughBehavior": "when_no_match",
         "type": "mock",
         "contentHandling": "CONVERT_TO_TEXT"
        }
       }
      },
      "/routes": {
       "get": {
        "consumes": [
         "application/json"
        ],
        "produces": [
         "application/json"
        ],
        "responses": {
         "200": {
          "description": "200 response",
          "schema": {
           "$ref": "#/definitions/Empty"
          }
         }
        },
        "x-amazon-apigateway-integration": {
         "responses": {
          "default": {
           "statusCode": "200"
          }
         },
         "uri": {
          "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
         },
         "passthroughBehavior": "when_no_match",
         "httpMethod": "POST",
         "contentHandling": "CONVERT_TO_TEXT",
         "type": "aws_proxy"
        }
       },
       "options": {
        "consumes": [
         "application/json"
        ],
        "produces": [
         "application/json"
        ],
        "responses": {
         "200": {
          "description": "200 response",
          "schema": {
           "$ref": "#/definitions/Empty"
          },
          "headers": {
           "Access-Control-Allow-Methods": {
            "type": "string"
           },
           "Access-Control-Allow-Origin": {
            "type": "string"
           },
           "Access-Control-Allow-Headers": {
            "type": "string"
           },
           "Access-Control-Expose-Headers": {
            "type": "string"
           },
           "Access-Control-Max-Age": {
            "type": "string"
           },
           "Access-Control-Allow-Credentials": {
            "type": "string"
           }
          }
         }
        },
        "x-amazon-apigateway-integration": {
         "responses": {
          "default": {
           "statusCode": "200",
           "responseParameters": {
            "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
            "method.response.header.Access-Control-Allow-Origin": "'*'",
            "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-API-Key,X-Amz-Date,X-Amz-Security-Token,X-Api-Key,X-RapidAPI-Host,X-RapidAPI-Key,X-RapidAPI-Proxy-Secret'",
            "method.response.header.Access-Control-Expose-Headers": "'X-RapidAPI-Key,X-RapidAPI-Proxy-Secret,X-RapidAPI-Host,X-API-Key,Authorization'",
            "method.response.header.Access-Control-Max-Age": "'300'",
            "method.response.header.Access-Control-Allow-Credentials": "'true'"
           }
          }
         },
         "requestTemplates": {
          "application/json": "{\"statusCode\": 200}"
         },
         "passthroughBehavior": "when_no_match",
         "type": "mock",
         "contentHandling": "CONVERT_TO_TEXT"
        }
       }
      },
      "/log": {
       "get": {
        "consumes": [
         "application/json"
        ],
        "produces": [
         "application/json"
        ],
        "responses": {
         "200": {
          "description": "200 response",
          "schema": {
           "$ref": "#/definitions/Empty"
          }
         }
        },
        "x-amazon-apigateway-integration": {
         "responses": {
          "default": {
           "statusCode": "200"
          }
         },
         "uri": {
          "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
         },
         "passthroughBehavior": "when_no_match",
         "httpMethod": "POST",
         "contentHandling": "CONVERT_TO_TEXT",
         "type": "aws_proxy"
        },
        "security": [
         {
          "fake_auth": []
         }
        ]
       },
       "post": {
        "consumes": [
         "application/json"
        ],
        "produces": [
         "application/json"
        ],
        "responses": {
         "200": {
          "description": "200 response",
          "schema": {
           "$ref": "#/definitions/Empty"
          }
         }
        },
        "x-amazon-apigateway-integration": {
         "responses": {
          "default": {
           "statusCode": "200"
          }
         },
         "uri": {
          "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
         },
         "passthroughBehavior": "when_no_match",
         "httpMethod": "POST",
         "contentHandling": "CONVERT_TO_TEXT",
         "type": "aws_proxy"
        },
        "security": [
         {
          "fake_auth": []
         }
        ]
       },
       "options": {
        "consumes": [
         "application/json"
        ],
        "produces": [
         "application/json"
        ],
        "responses": {
         "200": {
          "description": "200 response",
          "schema": {
           "$ref": "#/definitions/Empty"
          },
          "headers": {
           "Access-Control-Allow-Methods": {
            "type": "string"
           },
           "Access-Control-Allow-Origin": {
            "type": "string"
           },
           "Access-Control-Allow-Headers": {
            "type": "string"
           },
           "Access-Control-Expose-Headers": {
            "type": "string"
           },
           "Access-Control-Max-Age": {
            "type": "string"
           },
           "Access-Control-Allow-Credentials": {
            "type": "string"
           }
          }
         }
        },
        "x-amazon-apigateway-integration": {
         "responses": {
          "default": {
           "statusCode": "200",
           "responseParameters": {
            "method.response.header.Access-Control-Allow-Methods": "'GET,POST,OPTIONS'",
            "method.response.header.Access-Control-Allow-Origin": "'*'",
            "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-API-Key,X-Amz-Date,X-Amz-Security-Token,X-Api-Key,X-RapidAPI-Host,X-RapidAPI-Key,X-RapidAPI-Proxy-Secret'",
            "method.response.header.Access-Control-Expose-Headers": "'X-RapidAPI-Key,X-RapidAPI-Proxy-Secret,X-RapidAPI-Host,X-API-Key,Authorization'",
            "method.response.header.Access-Control-Max-Age": "'300'",
            "method.response.header.Access-Control-Allow-Credentials": "'true'"
           }
          }
         },
         "requestTemplates": {
          "application/json": "{\"statusCode\": 200}"
         },
         "passthroughBehavior": "when_no_match",
         "type": "mock",
         "contentHandling": "CONVERT_TO_TEXT"
        }
       }
      },
      "/run": {
       "get": {
        "consumes": [
         "application/json"
        ],
        "produces": [
         "application/json"
        ],
        "responses": {
         "200": {
          "description": "200 response",
          "schema": {
           "$ref": "#/definitions/Empty"
          }
         }
        },
        "x-amazon-apigateway-integration": {
         "responses": {
          "default": {
           "statusCode": "200"
          }
         },
         "uri": {
          "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
         },
         "passthroughBehavior": "when_no_match",
         "httpMethod": "POST",
         "contentHandling": "CONVERT_TO_TEXT",
         "type": "aws_proxy"
        },
        "summary": "A function that returns a message containing the welcome message and the",
        "description": "routes of the PFun CMA Model API.",
        "security": [
         {
          "fake_auth": []
         }
        ]
       },
       "post": {
        "consumes": [
         "application/json"
        ],
        "produces": [
         "application/json"
        ],
        "responses": {
         "200": {
          "description": "200 response",
          "schema": {
           "$ref": "#/definitions/Empty"
          }
         }
        },
        "x-amazon-apigateway-integration": {
         "responses": {
          "default": {
           "statusCode": "200"
          }
         },
         "uri": {
          "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
         },
         "passthroughBehavior": "when_no_match",
         "httpMethod": "POST",
         "contentHandling": "CONVERT_TO_TEXT",
         "type": "aws_proxy"
        },
        "summary": "A function that returns a message containing the welcome message and the",
        "description": "routes of the PFun CMA Model API.",
        "security": [
         {
          "fake_auth": []
         }
        ]
       },
       "options": {
        "consumes": [
         "application/json"
        ],
        "produces": [
         "application/json"
        ],
        "responses": {
         "200": {
          "description": "200 response",
          "schema": {
           "$ref": "#/definitions/Empty"
          },
          "headers": {
           "Access-Control-Allow-Methods": {
            "type": "string"
           },
           "Access-Control-Allow-Origin": {
            "type": "string"
           },
           "Access-Control-Allow-Headers": {
            "type": "string"
           },
           "Access-Control-Expose-Headers": {
            "type": "string"
           },
           "Access-Control-Max-Age": {
            "type": "string"
           },
           "Access-Control-Allow-Credentials": {
            "type": "string"
           }
          }
         }
        },
        "x-amazon-apigateway-integration": {
         "responses": {
          "default": {
           "statusCode": "200",
           "responseParameters": {
            "method.response.header.Access-Control-Allow-Methods": "'GET,POST,OPTIONS'",
            "method.response.header.Access-Control-Allow-Origin": "'*'",
            "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-API-Key,X-Amz-Date,X-Amz-Security-Token,X-Api-Key,X-RapidAPI-Host,X-RapidAPI-Key,X-RapidAPI-Proxy-Secret'",
            "method.response.header.Access-Control-Expose-Headers": "'X-RapidAPI-Key,X-RapidAPI-Proxy-Secret,X-RapidAPI-Host,X-API-Key,Authorization'",
            "method.response.header.Access-Control-Max-Age": "'300'",
            "method.response.header.Access-Control-Allow-Credentials": "'true'"
           }
          }
         },
         "requestTemplates": {
          "application/json": "{\"statusCode\": 200}"
         },
         "passthroughBehavior": "when_no_match",
         "type": "mock",
         "contentHandling": "CONVERT_TO_TEXT"
        }
       }
      },
      "/run-at-time": {
       "get": {
        "consumes": [
         "application/json"
        ],
        "produces": [
         "application/json"
        ],
        "responses": {
         "200": {
          "description": "200 response",
          "schema": {
           "$ref": "#/definitions/Empty"
          }
         }
        },
        "x-amazon-apigateway-integration": {
         "responses": {
          "default": {
           "statusCode": "200"
          }
         },
         "uri": {
          "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
         },
         "passthroughBehavior": "when_no_match",
         "httpMethod": "POST",
         "contentHandling": "CONVERT_TO_TEXT",
         "type": "aws_proxy"
        },
        "security": [
         {
          "fake_auth": []
         }
        ]
       },
       "post": {
        "consumes": [
         "application/json"
        ],
        "produces": [
         "application/json"
        ],
        "responses": {
         "200": {
          "description": "200 response",
          "schema": {
           "$ref": "#/definitions/Empty"
          }
         }
        },
        "x-amazon-apigateway-integration": {
         "responses": {
          "default": {
           "statusCode": "200"
          }
         },
         "uri": {
          "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
         },
         "passthroughBehavior": "when_no_match",
         "httpMethod": "POST",
         "contentHandling": "CONVERT_TO_TEXT",
         "type": "aws_proxy"
        },
        "security": [
         {
          "fake_auth": []
         }
        ]
       },
       "options": {
        "consumes": [
         "application/json"
        ],
        "produces": [
         "application/json"
        ],
        "responses": {
         "200": {
          "description": "200 response",
          "schema": {
           "$ref": "#/definitions/Empty"
          },
          "headers": {
           "Access-Control-Allow-Methods": {
            "type": "string"
           },
           "Access-Control-Allow-Origin": {
            "type": "string"
           },
           "Access-Control-Allow-Headers": {
            "type": "string"
           },
           "Access-Control-Expose-Headers": {
            "type": "string"
           },
           "Access-Control-Max-Age": {
            "type": "string"
           },
           "Access-Control-Allow-Credentials": {
            "type": "string"
           }
          }
         }
        },
        "x-amazon-apigateway-integration": {
         "responses": {
          "default": {
           "statusCode": "200",
           "responseParameters": {
            "method.response.header.Access-Control-Allow-Methods": "'GET,POST,OPTIONS'",
            "method.response.header.Access-Control-Allow-Origin": "'*'",
            "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-API-Key,X-Amz-Date,X-Amz-Security-Token,X-Api-Key,X-RapidAPI-Host,X-RapidAPI-Key,X-RapidAPI-Proxy-Secret'",
            "method.response.header.Access-Control-Expose-Headers": "'X-RapidAPI-Key,X-RapidAPI-Proxy-Secret,X-RapidAPI-Host,X-API-Key,Authorization'",
            "method.response.header.Access-Control-Max-Age": "'300'",
            "method.response.header.Access-Control-Allow-Credentials": "'true'"
           }
          }
         },
         "requestTemplates": {
          "application/json": "{\"statusCode\": 200}"
         },
         "passthroughBehavior": "when_no_match",
         "type": "mock",
         "contentHandling": "CONVERT_TO_TEXT"
        }
       }
      },
      "/fit": {
       "post": {
        "consumes": [
         "application/json"
        ],
        "produces": [
         "application/json"
        ],
        "responses": {
         "200": {
          "description": "200 response",
          "schema": {
           "$ref": "#/definitions/Empty"
          }
         }
        },
        "x-amazon-apigateway-integration": {
         "responses": {
          "default": {
           "statusCode": "200"
          }
         },
         "uri": {
          "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
         },
         "passthroughBehavior": "when_no_match",
         "httpMethod": "POST",
         "contentHandling": "CONVERT_TO_TEXT",
         "type": "aws_proxy"
        },
        "security": [
         {
          "fake_auth": []
         }
        ]
       },
       "options": {
        "consumes": [
         "application/json"
        ],
        "produces": [
         "application/json"
        ],
        "responses": {
         "200": {
          "description": "200 response",
          "schema": {
           "$ref": "#/definitions/Empty"
          },
          "headers": {
           "Access-Control-Allow-Methods": {
            "type": "string"
           },
           "Access-Control-Allow-Origin": {
            "type": "string"
           },
           "Access-Control-Allow-Headers": {
            "type": "string"
           },
           "Access-Control-Expose-Headers": {
            "type": "string"
           },
           "Access-Control-Max-Age": {
            "type": "string"
           },
           "Access-Control-Allow-Credentials": {
            "type": "string"
           }
          }
         }
        },
        "x-amazon-apigateway-integration": {
         "responses": {
          "default": {
           "statusCode": "200",
           "responseParameters": {
            "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
            "method.response.header.Access-Control-Allow-Origin": "'*'",
            "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-API-Key,X-Amz-Date,X-Amz-Security-Token,X-Api-Key,X-RapidAPI-Host,X-RapidAPI-Key,X-RapidAPI-Proxy-Secret'",
            "method.response.header.Access-Control-Expose-Headers": "'X-RapidAPI-Key,X-RapidAPI-Proxy-Secret,X-RapidAPI-Host,X-API-Key,Authorization'",
            "method.response.header.Access-Control-Max-Age": "'300'",
            "method.response.header.Access-Control-Allow-Credentials": "'true'"
           }
          }
         },
         "requestTemplates": {
          "application/json": "{\"statusCode\": 200}"
         },
         "passthroughBehavior": "when_no_match",
         "type": "mock",
         "contentHandling": "CONVERT_TO_TEXT"
        }
       }
      },
      "/login-success": {
       "get": {
        "consumes": [
         "application/json"
        ],
        "produces": [
         "application/json"
        ],
        "responses": {
         "200": {
          "description": "200 response",
          "schema": {
           "$ref": "#/definitions/Empty"
          }
         }
        },
        "x-amazon-apigateway-integration": {
         "responses": {
          "default": {
           "statusCode": "200"
          }
         },
         "uri": {
          "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
         },
         "passthroughBehavior": "when_no_match",
         "httpMethod": "POST",
         "contentHandling": "CONVERT_TO_TEXT",
         "type": "aws_proxy"
        }
       },
       "options": {
        "consumes": [
         "application/json"
        ],
        "produces": [
         "application/json"
        ],
        "responses": {
         "200": {
          "description": "200 response",
          "schema": {
           "$ref": "#/definitions/Empty"
          },
          "headers": {
           "Access-Control-Allow-Methods": {
            "type": "string"
           },
           "Access-Control-Allow-Origin": {
            "type": "string"
           },
           "Access-Control-Allow-Headers": {
            "type": "string"
           },
           "Access-Control-Expose-Headers": {
            "type": "string"
           },
           "Access-Control-Max-Age": {
            "type": "string"
           },
           "Access-Control-Allow-Credentials": {
            "type": "string"
           }
          }
         }
        },
        "x-amazon-apigateway-integration": {
         "responses": {
          "default": {
           "statusCode": "200",
           "responseParameters": {
            "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
            "method.response.header.Access-Control-Allow-Origin": "'*'",
            "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-API-Key,X-Amz-Date,X-Amz-Security-Token,X-Api-Key,X-RapidAPI-Host,X-RapidAPI-Key,X-RapidAPI-Proxy-Secret'",
            "method.response.header.Access-Control-Expose-Headers": "'X-RapidAPI-Key,X-RapidAPI-Proxy-Secret,X-RapidAPI-Host,X-API-Key,Authorization'",
            "method.response.header.Access-Control-Max-Age": "'300'",
            "method.response.header.Access-Control-Allow-Credentials": "'true'"
           }
          }
         },
         "requestTemplates": {
          "application/json": "{\"statusCode\": 200}"
         },
         "passthroughBehavior": "when_no_match",
         "type": "mock",
         "contentHandling": "CONVERT_TO_TEXT"
        }
       }
      },
      "/login-dexcom": {
       "get": {
        "consumes": [
         "application/json"
        ],
        "produces": [
         "application/json"
        ],
        "responses": {
         "200": {
          "description": "200 response",
          "schema": {
           "$ref": "#/definitions/Empty"
          }
         }
        },
        "x-amazon-apigateway-integration": {
         "responses": {
          "default": {
           "statusCode": "200"
          }
         },
         "uri": {
          "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
         },
         "passthroughBehavior": "when_no_match",
         "httpMethod": "POST",
         "contentHandling": "CONVERT_TO_TEXT",
         "type": "aws_proxy"
        }
       },
       "options": {
        "consumes": [
         "application/json"
        ],
        "produces": [
         "application/json"
        ],
        "responses": {
         "200": {
          "description": "200 response",
          "schema": {
           "$ref": "#/definitions/Empty"
          },
          "headers": {
           "Access-Control-Allow-Methods": {
            "type": "string"
           },
           "Access-Control-Allow-Origin": {
            "type": "string"
           },
           "Access-Control-Allow-Headers": {
            "type": "string"
           },
           "Access-Control-Expose-Headers": {
            "type": "string"
           },
           "Access-Control-Max-Age": {
            "type": "string"
           },
           "Access-Control-Allow-Credentials": {
            "type": "string"
           }
          }
         }
        },
        "x-amazon-apigateway-integration": {
         "responses": {
          "default": {
           "statusCode": "200",
           "responseParameters": {
            "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
            "method.response.header.Access-Control-Allow-Origin": "'*'",
            "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-API-Key,X-Amz-Date,X-Amz-Security-Token,X-Api-Key,X-RapidAPI-Host,X-RapidAPI-Key,X-RapidAPI-Proxy-Secret'",
            "method.response.header.Access-Control-Expose-Headers": "'X-RapidAPI-Key,X-RapidAPI-Proxy-Secret,X-RapidAPI-Host,X-API-Key,Authorization'",
            "method.response.header.Access-Control-Max-Age": "'300'",
            "method.response.header.Access-Control-Allow-Credentials": "'true'"
           }
          }
         },
         "requestTemplates": {
          "application/json": "{\"statusCode\": 200}"
         },
         "passthroughBehavior": "when_no_match",
         "type": "mock",
         "contentHandling": "CONVERT_TO_TEXT"
        }
       }
      }
     },
     "definitions": {
      "Empty": {
       "type": "object",
       "title": "Empty Schema"
      }
     },
     "x-amazon-apigateway-binary-media-types": [
      "application/octet-stream",
      "application/x-tar",
      "application/zip",
      "audio/basic",
      "audio/ogg",
      "audio/mp4",
      "audio/mpeg",
      "audio/wav",
      "audio/webm",
      "image/png",
      "image/jpg",
      "image/jpeg",
      "image/gif",
      "video/ogg",
      "video/mpeg",
      "video/webm"
     ],
     "securityDefinitions": {
      "fake_auth": {
       "in": "header",
       "type": "apiKey",
       "name": "Authorization",
       "x-amazon-apigateway-authtype": "custom",
       "x-amazon-apigateway-authorizer": {
        "type": "token",
        "authorizerUri": {
         "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FakeAuth.Arn}/invocations"
        }
       }
      }
     }
    },
    "EndpointConfiguration": "EDGE",
    "StageName": "api"
   }
  },
  "APIHandlerInvokePermission": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Ref": "APIHandler"
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Sub": [
      "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPIId}/*",
      {
       "RestAPIId": {
        "Ref": "RestAPI"
       }
      }
     ]
    }
   }
  },
  "FakeAuthInvokePermission": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "FakeAuth",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Sub": [
      "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPIId}/*",
      {
       "RestAPIId": {
        "Ref": "RestAPI"
       }
      }
     ]
    }
   }
  },
  "WebsocketConnect": {
   "Type": "AWS::Serverless::Function",
   "Properties": {
    "CodeUri": {
     "Bucket": "cdk-hnb659fds-assets-860311922912-us-east-1",
     "Key": "416d2d609900ffe839708b890766dc2535c3254ba7af5e9f7b96480826718852.zip"
    },
    "Handler": "app.run_at_time_connect",
    "Layers": [
     {
      "Ref": "ManagedLayer"
     },
     "arn:aws:lambda:us-east-1:860311922912:layer:pfun-cma-model-deps-dev-managed-layer:14"
    ],
    "MemorySize": 128,
    "Runtime": "python3.10",
    "Tags": {
     "aws-chalice": "version=1.29.0:stage=PFunCMAModelPipeline/AppStage/ChaliceApp:app=pfun-cma-model"
    },
    "Timeout": 60,
    "Tracing": "PassThrough"
   }
  },
  "WebsocketMessage": {
   "Type": "AWS::Serverless::Function",
   "Properties": {
    "CodeUri": {
     "Bucket": "cdk-hnb659fds-assets-860311922912-us-east-1",
     "Key": "416d2d609900ffe839708b890766dc2535c3254ba7af5e9f7b96480826718852.zip"
    },
    "Handler": "app.run_at_time_ws",
    "Layers": [
     {
      "Ref": "ManagedLayer"
     },
     "arn:aws:lambda:us-east-1:860311922912:layer:pfun-cma-model-deps-dev-managed-layer:14"
    ],
    "MemorySize": 128,
    "Runtime": "python3.10",
    "Tags": {
     "aws-chalice": "version=1.29.0:stage=PFunCMAModelPipeline/AppStage/ChaliceApp:app=pfun-cma-model"
    },
    "Timeout": 60,
    "Tracing": "PassThrough"
   }
  },
  "WebsocketAPI": {
   "Type": "AWS::ApiGatewayV2::Api",
   "Properties": {
    "Name": "pfun-cma-model-PFunCMAModelPipeline/AppStage/ChaliceApp-websocket-api",
    "ProtocolType": "WEBSOCKET",
    "RouteSelectionExpression": "$request.body.action"
   }
  },
  "WebsocketConnectAPIIntegration": {
   "Type": "AWS::ApiGatewayV2::Integration",
   "Properties": {
    "ApiId": {
     "Ref": "WebsocketAPI"
    },
    "ConnectionType": "INTERNET",
    "ContentHandlingStrategy": "CONVERT_TO_TEXT",
    "IntegrationType": "AWS_PROXY",
    "IntegrationUri": {
     "Fn::Sub": [
      "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${WebsocketHandler}/invocations",
      {
       "WebsocketHandler": {
        "Ref": "WebsocketConnect"
       }
      }
     ]
    }
   }
  },
  "WebsocketConnectInvokePermission": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Ref": "WebsocketConnect"
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Sub": [
      "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${WebsocketAPIId}/*",
      {
       "WebsocketAPIId": {
        "Ref": "WebsocketAPI"
       }
      }
     ]
    }
   }
  },
  "WebsocketMessageAPIIntegration": {
   "Type": "AWS::ApiGatewayV2::Integration",
   "Properties": {
    "ApiId": {
     "Ref": "WebsocketAPI"
    },
    "ConnectionType": "INTERNET",
    "ContentHandlingStrategy": "CONVERT_TO_TEXT",
    "IntegrationType": "AWS_PROXY",
    "IntegrationUri": {
     "Fn::Sub": [
      "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${WebsocketHandler}/invocations",
      {
       "WebsocketHandler": {
        "Ref": "WebsocketMessage"
       }
      }
     ]
    }
   }
  },
  "WebsocketMessageInvokePermission": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Ref": "WebsocketMessage"
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Sub": [
      "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${WebsocketAPIId}/*",
      {
       "WebsocketAPIId": {
        "Ref": "WebsocketAPI"
       }
      }
     ]
    }
   }
  },
  "WebsocketConnectRoute": {
   "Type": "AWS::ApiGatewayV2::Route",
   "Properties": {
    "ApiId": {
     "Ref": "WebsocketAPI"
    },
    "RouteKey": "$connect",
    "Target": {
     "Fn::Join": [
      "/",
      [
       "integrations",
       {
        "Ref": "WebsocketConnectAPIIntegration"
       }
      ]
     ]
    }
   }
  },
  "WebsocketMessageRoute": {
   "Type": "AWS::ApiGatewayV2::Route",
   "Properties": {
    "ApiId": {
     "Ref": "WebsocketAPI"
    },
    "RouteKey": "$default",
    "Target": {
     "Fn::Join": [
      "/",
      [
       "integrations",
       {
        "Ref": "WebsocketMessageAPIIntegration"
       }
      ]
     ]
    }
   }
  },
  "WebsocketAPIDeployment": {
   "Type": "AWS::ApiGatewayV2::Deployment",
   "Properties": {
    "ApiId": {
     "Ref": "WebsocketAPI"
    }
   },
   "DependsOn": [
    "WebsocketConnectRoute",
    "WebsocketMessageRoute"
   ]
  },
  "WebsocketAPIStage": {
   "Type": "AWS::ApiGatewayV2::Stage",
   "Properties": {
    "ApiId": {
     "Ref": "WebsocketAPI"
    },
    "DeploymentId": {
     "Ref": "WebsocketAPIDeployment"
    },
    "StageName": "api"
   }
  },
  "PFunCMAModelVPC45F492DB": {
   "Type": "AWS::EC2::VPC",
   "Properties": {
    "CidrBlock": "10.0.0.0/16",
    "EnableDnsHostnames": true,
    "EnableDnsSupport": true,
    "InstanceTenancy": "default",
    "Tags": [
     {
      "Key": "Name",
      "Value": "PFunCMAModelPipeline/AppStage/ChaliceApp/PFunCMAModelVPC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "PFunCMAModelPipeline/AppStage/ChaliceApp/PFunCMAModelVPC/Resource"
   }
  },
  "PFunCMAModelVPCpublicSubnet1Subnet8C7FD47D": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": "us-east-1a",
    "CidrBlock": "10.0.0.0/17",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "PFunCMAModelPipeline/AppStage/ChaliceApp/PFunCMAModelVPC/publicSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "PFunCMAModelVPC45F492DB"
    }
   },
   "Metadata": {
    "aws:cdk:path": "PFunCMAModelPipeline/AppStage/ChaliceApp/PFunCMAModelVPC/publicSubnet1/Subnet"
   }
  },
  "PFunCMAModelVPCpublicSubnet1RouteTableA470CB3E": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "PFunCMAModelPipeline/AppStage/ChaliceApp/PFunCMAModelVPC/publicSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "PFunCMAModelVPC45F492DB"
    }
   },
   "Metadata": {
    "aws:cdk:path": "PFunCMAModelPipeline/AppStage/ChaliceApp/PFunCMAModelVPC/publicSubnet1/RouteTable"
   }
  },
  "PFunCMAModelVPCpublicSubnet1RouteTableAssociation1E3CE604": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "PFunCMAModelVPCpublicSubnet1RouteTableA470CB3E"
    },
    "SubnetId": {
     "Ref": "PFunCMAModelVPCpublicSubnet1Subnet8C7FD47D"
    }
   },
   "Metadata": {
    "aws:cdk:path": "PFunCMAModelPipeline/AppStage/ChaliceApp/PFunCMAModelVPC/publicSubnet1/RouteTableAssociation"
   }
  },
  "PFunCMAModelVPCpublicSubnet1DefaultRouteDE76B87D": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "PFunCMAModelVPCIGW41DFF152"
    },
    "RouteTableId": {
     "Ref": "PFunCMAModelVPCpublicSubnet1RouteTableA470CB3E"
    }
   },
   "DependsOn": [
    "PFunCMAModelVPCVPCGWB5B9A62D"
   ],
   "Metadata": {
    "aws:cdk:path": "PFunCMAModelPipeline/AppStage/ChaliceApp/PFunCMAModelVPC/publicSubnet1/DefaultRoute"
   }
  },
  "PFunCMAModelVPCpublicSubnet1EIP7E238277": {
   "Type": "AWS::EC2::EIP",
   "Properties": {
    "Domain": "vpc",
    "Tags": [
     {
      "Key": "Name",
      "Value": "PFunCMAModelPipeline/AppStage/ChaliceApp/PFunCMAModelVPC/publicSubnet1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "PFunCMAModelPipeline/AppStage/ChaliceApp/PFunCMAModelVPC/publicSubnet1/EIP"
   }
  },
  "PFunCMAModelVPCpublicSubnet1NATGatewayEE43DF7C": {
   "Type": "AWS::EC2::NatGateway",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "PFunCMAModelVPCpublicSubnet1EIP7E238277",
      "AllocationId"
     ]
    },
    "SubnetId": {
     "Ref": "PFunCMAModelVPCpublicSubnet1Subnet8C7FD47D"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "PFunCMAModelPipeline/AppStage/ChaliceApp/PFunCMAModelVPC/publicSubnet1"
     }
    ]
   },
   "DependsOn": [
    "PFunCMAModelVPCpublicSubnet1DefaultRouteDE76B87D",
    "PFunCMAModelVPCpublicSubnet1RouteTableAssociation1E3CE604"
   ],
   "Metadata": {
    "aws:cdk:path": "PFunCMAModelPipeline/AppStage/ChaliceApp/PFunCMAModelVPC/publicSubnet1/NATGateway"
   }
  },
  "PFunCMAModelVPCpublicSubnet2SubnetB6BCDE86": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": "us-east-1b",
    "CidrBlock": "10.0.128.0/17",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "PFunCMAModelPipeline/AppStage/ChaliceApp/PFunCMAModelVPC/publicSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "PFunCMAModelVPC45F492DB"
    }
   },
   "Metadata": {
    "aws:cdk:path": "PFunCMAModelPipeline/AppStage/ChaliceApp/PFunCMAModelVPC/publicSubnet2/Subnet"
   }
  },
  "PFunCMAModelVPCpublicSubnet2RouteTableA662863B": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "PFunCMAModelPipeline/AppStage/ChaliceApp/PFunCMAModelVPC/publicSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "PFunCMAModelVPC45F492DB"
    }
   },
   "Metadata": {
    "aws:cdk:path": "PFunCMAModelPipeline/AppStage/ChaliceApp/PFunCMAModelVPC/publicSubnet2/RouteTable"
   }
  },
  "PFunCMAModelVPCpublicSubnet2RouteTableAssociation80285FB0": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "PFunCMAModelVPCpublicSubnet2RouteTableA662863B"
    },
    "SubnetId": {
     "Ref": "PFunCMAModelVPCpublicSubnet2SubnetB6BCDE86"
    }
   },
   "Metadata": {
    "aws:cdk:path": "PFunCMAModelPipeline/AppStage/ChaliceApp/PFunCMAModelVPC/publicSubnet2/RouteTableAssociation"
   }
  },
  "PFunCMAModelVPCpublicSubnet2DefaultRoute6684FA33": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "PFunCMAModelVPCIGW41DFF152"
    },
    "RouteTableId": {
     "Ref": "PFunCMAModelVPCpublicSubnet2RouteTableA662863B"
    }
   },
   "DependsOn": [
    "PFunCMAModelVPCVPCGWB5B9A62D"
   ],
   "Metadata": {
    "aws:cdk:path": "PFunCMAModelPipeline/AppStage/ChaliceApp/PFunCMAModelVPC/publicSubnet2/DefaultRoute"
   }
  },
  "PFunCMAModelVPCIGW41DFF152": {
   "Type": "AWS::EC2::InternetGateway",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "PFunCMAModelPipeline/AppStage/ChaliceApp/PFunCMAModelVPC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "PFunCMAModelPipeline/AppStage/ChaliceApp/PFunCMAModelVPC/IGW"
   }
  },
  "PFunCMAModelVPCVPCGWB5B9A62D": {
   "Type": "AWS::EC2::VPCGatewayAttachment",
   "Properties": {
    "InternetGatewayId": {
     "Ref": "PFunCMAModelVPCIGW41DFF152"
    },
    "VpcId": {
     "Ref": "PFunCMAModelVPC45F492DB"
    }
   },
   "Metadata": {
    "aws:cdk:path": "PFunCMAModelPipeline/AppStage/ChaliceApp/PFunCMAModelVPC/VPCGW"
   }
  },
  "PFunCMAModelLoadBalancer930A86BD": {
   "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
   "Properties": {
    "IpAddressType": "ipv4",
    "LoadBalancerAttributes": [
     {
      "Key": "deletion_protection.enabled",
      "Value": "false"
     }
    ],
    "Scheme": "internet-facing",
    "SecurityGroups": [
     {
      "Fn::GetAtt": [
       "PFunCMAModelLoadBalancerSecurityGroupE55A7C00",
       "GroupId"
      ]
     },
     {
      "Fn::GetAtt": [
       "PFunAlbSecurityGroupDA3A5D19",
       "GroupId"
      ]
     }
    ],
    "Subnets": [
     {
      "Ref": "PFunCMAModelVPCpublicSubnet1Subnet8C7FD47D"
     },
     {
      "Ref": "PFunCMAModelVPCpublicSubnet2SubnetB6BCDE86"
     }
    ],
    "Type": "application"
   },
   "DependsOn": [
    "PFunCMAModelVPCpublicSubnet1DefaultRouteDE76B87D",
    "PFunCMAModelVPCpublicSubnet1RouteTableAssociation1E3CE604",
    "PFunCMAModelVPCpublicSubnet2DefaultRoute6684FA33",
    "PFunCMAModelVPCpublicSubnet2RouteTableAssociation80285FB0"
   ],
   "Metadata": {
    "aws:cdk:path": "PFunCMAModelPipeline/AppStage/ChaliceApp/PFunCMAModelLoadBalancer/Resource"
   }
  },
  "PFunCMAModelLoadBalancerSecurityGroupE55A7C00": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "Automatically created Security Group for ELB PFunCMAModelPipelineAppStageChaliceAppPFunCMAModelLoadBalancer7D5F47EF",
    "SecurityGroupEgress": [
     {
      "CidrIp": "255.255.255.255/32",
      "Description": "Disallow all traffic",
      "FromPort": 252,
      "IpProtocol": "icmp",
      "ToPort": 86
     }
    ],
    "SecurityGroupIngress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow from anyone on port 443",
      "FromPort": 443,
      "IpProtocol": "tcp",
      "ToPort": 443
     },
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow from anyone on port 80",
      "FromPort": 80,
      "IpProtocol": "tcp",
      "ToPort": 80
     }
    ],
    "VpcId": {
     "Ref": "PFunCMAModelVPC45F492DB"
    }
   },
   "Metadata": {
    "aws:cdk:path": "PFunCMAModelPipeline/AppStage/ChaliceApp/PFunCMAModelLoadBalancer/SecurityGroup/Resource"
   }
  },
  "PFunCMAModelLoadBalancerPFunCMAModelListener646FABCB": {
   "Type": "AWS::ElasticLoadBalancingV2::Listener",
   "Properties": {
    "Certificates": [
     {
      "CertificateArn": "arn:aws:acm:us-east-1:860311922912:certificate/01704bec-f302-4d8a-a1ae-b211d880a9d6"
     }
    ],
    "DefaultActions": [
     {
      "TargetGroupArn": {
       "Ref": "PFunCMAModelLoadBalancerPFunCMAModelListenerPFunCMAModelAPIHandlerTargetGroup31AC0FA1"
      },
      "Type": "forward"
     }
    ],
    "LoadBalancerArn": {
     "Ref": "PFunCMAModelLoadBalancer930A86BD"
    },
    "Port": 443,
    "Protocol": "HTTPS"
   },
   "Metadata": {
    "aws:cdk:path": "PFunCMAModelPipeline/AppStage/ChaliceApp/PFunCMAModelLoadBalancer/PFunCMAModelListener/Resource"
   }
  },
  "PFunCMAModelLoadBalancerPFunCMAModelListenerPFunCMAModelAPIHandlerTargetGroup31AC0FA1": {
   "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
   "Properties": {
    "HealthCheckIntervalSeconds": 300,
    "TargetType": "lambda",
    "Targets": [
     {
      "Id": {
       "Fn::GetAtt": [
        "APIHandler",
        "Arn"
       ]
      }
     }
    ]
   },
   "DependsOn": [
    "PFunCMAModelPipelineAppStageChaliceAppPFunCMAModelChaliceAppAPIHandlerInvoke2UTWxhlfyqbT5FTn5jvgbLgjFfJwzswGk55DU1HY1D6B301F"
   ],
   "Metadata": {
    "aws:cdk:path": "PFunCMAModelPipeline/AppStage/ChaliceApp/PFunCMAModelLoadBalancer/PFunCMAModelListener/PFunCMAModelAPIHandlerTargetGroup/Resource"
   }
  },
  "PFunCMAModelLoadBalancerRedirect80To443F9B8C7FE": {
   "Type": "AWS::ElasticLoadBalancingV2::Listener",
   "Properties": {
    "DefaultActions": [
     {
      "RedirectConfig": {
       "Port": "443",
       "Protocol": "HTTPS",
       "StatusCode": "HTTP_301"
      },
      "Type": "redirect"
     }
    ],
    "LoadBalancerArn": {
     "Ref": "PFunCMAModelLoadBalancer930A86BD"
    },
    "Port": 80,
    "Protocol": "HTTP"
   },
   "Metadata": {
    "aws:cdk:path": "PFunCMAModelPipeline/AppStage/ChaliceApp/PFunCMAModelLoadBalancer/Redirect80To443/Resource"
   }
  },
  "PFunAlbSecurityGroupDA3A5D19": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "PFunCMAModelPipeline/AppStage/ChaliceApp/PFunAlbSecurityGroup",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "SecurityGroupIngress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow from anyone on port 443",
      "FromPort": 443,
      "IpProtocol": "tcp",
      "ToPort": 443
     },
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow from anyone on port 80",
      "FromPort": 80,
      "IpProtocol": "tcp",
      "ToPort": 80
     }
    ],
    "VpcId": {
     "Ref": "PFunCMAModelVPC45F492DB"
    }
   },
   "Metadata": {
    "aws:cdk:path": "PFunCMAModelPipeline/AppStage/ChaliceApp/PFunAlbSecurityGroup/Resource"
   }
  },
  "PFunCMAModelPipelineAppStageChaliceAppPFunCMAModelChaliceAppAPIHandlerInvoke2UTWxhlfyqbT5FTn5jvgbLgjFfJwzswGk55DU1HY1D6B301F": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "APIHandler",
      "Arn"
     ]
    },
    "Principal": "elasticloadbalancing.amazonaws.com"
   },
   "Metadata": {
    "aws:cdk:path": "PFunCMAModelPipeline/AppStage/ChaliceApp/PFunCMAModelPipeline--AppStage--ChaliceApp--PFunCMAModelChaliceApp--APIHandler/Invoke2UTWxhlfyqbT5FTn--5jvgbLgj+FfJwzswGk55DU1H--Y="
   }
  },
  "PFunDevCMAModelHttpApiMapping": {
   "Type": "AWS::ApiGatewayV2::ApiMapping",
   "Properties": {
    "ApiId": {
     "Fn::GetAtt": [
      "RestAPI",
      "ApiId"
     ]
    },
    "DomainName": "dev.pfun.app",
    "Stage": "api"
   },
   "Metadata": {
    "aws:cdk:path": "PFunCMAModelPipeline/AppStage/ChaliceApp/PFunDevCMAModelHttpApiMapping"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/2VS207DMAz9Ft6zcNkTjxs3TRpQbWivk5t6JSxNosQBVdP+HSdboQipku1j+/jY6Y28ncqrC/iKE9XsJ0bX8rAmUHvB0PYQp1uIESnKWTYiTuU8qT3SHCKKCJ083O3sEnoMGwxROys4fkxW0dmfeX0UBrq6gVJbYeh0LJVDWeY6CvC6BcIv6D9vSiV3ZoKFJWwDDHwrlwizc4/euL5DSzlizS2e5z2D99q2R4GKmTZeZXxT3Ykq1Uardaotnpp+vML6BrXBX/wX492d0v8lPCyqbF6Ank7KB72B20cQzz5HM+LbvhfRa1QpaOqfgku+TB0DLN5AJK2Mg6YGA1bxSvkyM+95iSJmybl5yWHIDH/icZ2OhPZcM/ij/BuElgUPQkbh+FnkCiPxeU/PVf6HfHWWJVhlanYudIVuq60yqUFZrlHcTPuayCcSzOJSUAUa/KOoenp39nIqr6/4m1x8RK0nIVnSHcrVyX4DtQTAgKwCAAA="
   },
   "Metadata": {
    "aws:cdk:path": "PFunCMAModelPipeline/AppStage/ChaliceApp/CDKMetadata/Default"
   }
  }
 },
 "Outputs": {
  "RestAPIId": {
   "Value": {
    "Ref": "RestAPI"
   }
  },
  "APIHandlerName": {
   "Value": {
    "Ref": "APIHandler"
   }
  },
  "APIHandlerArn": {
   "Value": {
    "Fn::GetAtt": [
     "APIHandler",
     "Arn"
    ]
   }
  },
  "EndpointURL": {
   "Value": {
    "Fn::Sub": "https://${RestAPI}.execute-api.${AWS::Region}.${AWS::URLSuffix}/api/"
   }
  },
  "WebsocketAPIId": {
   "Value": {
    "Ref": "WebsocketAPI"
   }
  },
  "WebsocketConnectHandlerArn": {
   "Value": {
    "Fn::GetAtt": [
     "WebsocketConnect",
     "Arn"
    ]
   }
  },
  "WebsocketConnectHandlerName": {
   "Value": {
    "Ref": "WebsocketConnect"
   }
  },
  "WebsocketMessageHandlerArn": {
   "Value": {
    "Fn::GetAtt": [
     "WebsocketMessage",
     "Arn"
    ]
   }
  },
  "WebsocketMessageHandlerName": {
   "Value": {
    "Ref": "WebsocketMessage"
   }
  },
  "WebsocketConnectEndpointURL": {
   "Value": {
    "Fn::Sub": "wss://${WebsocketAPI}.execute-api.${AWS::Region}.${AWS::URLSuffix}/api/"
   }
  },
  "PFunAlbDNSName": {
   "Value": {
    "Fn::GetAtt": [
     "PFunCMAModelLoadBalancer930A86BD",
     "DNSName"
    ]
   }
  },
  "PFunDevCMAModelCustomDomainNameOutput": {
   "Value": "dev.pfun.app"
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}